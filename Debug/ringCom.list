
ringCom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b00  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003cc4  08003cc4  00004cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d00  08003d00  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d00  08003d00  00004d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d08  08003d08  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d08  08003d08  00004d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d0c  08003d0c  00004d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d10  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000000c  08003d1c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08003d1c  00005244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cca  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c12  00000000  00000000  0000ed06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  00010918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000638  00000000  00000000  00011140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002134f  00000000  00000000  00011778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa2b  00000000  00000000  00032ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8666  00000000  00000000  0003d4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105b58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000206c  00000000  00000000  00105b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00107c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003cac 	.word	0x08003cac

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003cac 	.word	0x08003cac

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1) {
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a08      	ldr	r2, [pc, #32]	@ (8000534 <HAL_UART_RxCpltCallback+0x30>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d10a      	bne.n	800052c <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Receive_DMA(&huart1, &veri, 1);
 8000516:	2201      	movs	r2, #1
 8000518:	4907      	ldr	r1, [pc, #28]	@ (8000538 <HAL_UART_RxCpltCallback+0x34>)
 800051a:	4808      	ldr	r0, [pc, #32]	@ (800053c <HAL_UART_RxCpltCallback+0x38>)
 800051c:	f002 fac2 	bl	8002aa4 <HAL_UART_Receive_DMA>
		writeBufferData(&ring, veri);
 8000520:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <HAL_UART_RxCpltCallback+0x34>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4619      	mov	r1, r3
 8000526:	4806      	ldr	r0, [pc, #24]	@ (8000540 <HAL_UART_RxCpltCallback+0x3c>)
 8000528:	f000 f9e1 	bl	80008ee <writeBufferData>
	}
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40011000 	.word	0x40011000
 8000538:	20000028 	.word	0x20000028
 800053c:	20000138 	.word	0x20000138
 8000540:	2000002c 	.word	0x2000002c

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fcd8 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f82e 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f8f6 	bl	8000740 <MX_GPIO_Init>
  MX_DMA_Init();
 8000554:	f000 f8cc 	bl	80006f0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000558:	f000 f89a 	bl	8000690 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  resetBuffer(&ring);
 800055c:	480f      	ldr	r0, [pc, #60]	@ (800059c <main+0x58>)
 800055e:	f000 f983 	bl	8000868 <resetBuffer>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(findDataInBuffer(&ring, "OK")) {  // burada islemler yapabilirsiniz OK mesajı gelince baska fonksyona gecme gibi
 8000562:	490f      	ldr	r1, [pc, #60]	@ (80005a0 <main+0x5c>)
 8000564:	480d      	ldr	r0, [pc, #52]	@ (800059c <main+0x58>)
 8000566:	f000 f9f3 	bl	8000950 <findDataInBuffer>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d008      	beq.n	8000582 <main+0x3e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	2120      	movs	r1, #32
 8000574:	480b      	ldr	r0, [pc, #44]	@ (80005a4 <main+0x60>)
 8000576:	f001 fbdb 	bl	8001d30 <HAL_GPIO_WritePin>
		  writeBufferData(&ring, 'W');
 800057a:	2157      	movs	r1, #87	@ 0x57
 800057c:	4807      	ldr	r0, [pc, #28]	@ (800059c <main+0x58>)
 800057e:	f000 f9b6 	bl	80008ee <writeBufferData>
	  }
	  if(findDataInBuffer(&ring, "ERROR")) {
 8000582:	4909      	ldr	r1, [pc, #36]	@ (80005a8 <main+0x64>)
 8000584:	4805      	ldr	r0, [pc, #20]	@ (800059c <main+0x58>)
 8000586:	f000 f9e3 	bl	8000950 <findDataInBuffer>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0e8      	beq.n	8000562 <main+0x1e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2120      	movs	r1, #32
 8000594:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <main+0x60>)
 8000596:	f001 fbcb 	bl	8001d30 <HAL_GPIO_WritePin>
	  if(findDataInBuffer(&ring, "OK")) {  // burada islemler yapabilirsiniz OK mesajı gelince baska fonksyona gecme gibi
 800059a:	e7e2      	b.n	8000562 <main+0x1e>
 800059c:	2000002c 	.word	0x2000002c
 80005a0:	08003cc4 	.word	0x08003cc4
 80005a4:	40020000 	.word	0x40020000
 80005a8:	08003cc8 	.word	0x08003cc8

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	@ 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	2234      	movs	r2, #52	@ 0x34
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fb26 	bl	8003c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000688 <SystemClock_Config+0xdc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d8:	4a2b      	ldr	r2, [pc, #172]	@ (8000688 <SystemClock_Config+0xdc>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e0:	4b29      	ldr	r3, [pc, #164]	@ (8000688 <SystemClock_Config+0xdc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	4b26      	ldr	r3, [pc, #152]	@ (800068c <SystemClock_Config+0xe0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a25      	ldr	r2, [pc, #148]	@ (800068c <SystemClock_Config+0xe0>)
 80005f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b23      	ldr	r3, [pc, #140]	@ (800068c <SystemClock_Config+0xe0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800061c:	2308      	movs	r3, #8
 800061e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000620:	23b4      	movs	r3, #180	@ 0xb4
 8000622:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800062c:	2302      	movs	r3, #2
 800062e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4618      	mov	r0, r3
 8000636:	f001 ff47 	bl	80024c8 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000640:	f000 f90c 	bl	800085c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000644:	f001 fba6 	bl	8001d94 <HAL_PWREx_EnableOverDrive>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800064e:	f000 f905 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000668:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	2105      	movs	r1, #5
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fbdf 	bl	8001e34 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800067c:	f000 f8ee 	bl	800085c <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	@ 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000694:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <MX_USART1_UART_Init+0x54>)
 8000696:	4a14      	ldr	r2, [pc, #80]	@ (80006e8 <MX_USART1_UART_Init+0x58>)
 8000698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_USART1_UART_Init+0x54>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_USART1_UART_Init+0x54>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_USART1_UART_Init+0x54>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_USART1_UART_Init+0x54>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <MX_USART1_UART_Init+0x54>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <MX_USART1_UART_Init+0x54>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <MX_USART1_UART_Init+0x54>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c6:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <MX_USART1_UART_Init+0x54>)
 80006c8:	f002 f99c 	bl	8002a04 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f000 f8c3 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_DMA(&huart1, &veri, 1);
 80006d6:	2201      	movs	r2, #1
 80006d8:	4904      	ldr	r1, [pc, #16]	@ (80006ec <MX_USART1_UART_Init+0x5c>)
 80006da:	4802      	ldr	r0, [pc, #8]	@ (80006e4 <MX_USART1_UART_Init+0x54>)
 80006dc:	f002 f9e2 	bl	8002aa4 <HAL_UART_Receive_DMA>
  /* USER CODE END USART1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000138 	.word	0x20000138
 80006e8:	40011000 	.word	0x40011000
 80006ec:	20000028 	.word	0x20000028

080006f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <MX_DMA_Init+0x4c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a0f      	ldr	r2, [pc, #60]	@ (800073c <MX_DMA_Init+0x4c>)
 8000700:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <MX_DMA_Init+0x4c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	203a      	movs	r0, #58	@ 0x3a
 8000718:	f000 fd3d 	bl	8001196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800071c:	203a      	movs	r0, #58	@ 0x3a
 800071e:	f000 fd56 	bl	80011ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2046      	movs	r0, #70	@ 0x46
 8000728:	f000 fd35 	bl	8001196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800072c:	2046      	movs	r0, #70	@ 0x46
 800072e:	f000 fd4e 	bl	80011ce <HAL_NVIC_EnableIRQ>

}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b2a      	ldr	r3, [pc, #168]	@ (8000804 <MX_GPIO_Init+0xc4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a29      	ldr	r2, [pc, #164]	@ (8000804 <MX_GPIO_Init+0xc4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b27      	ldr	r3, [pc, #156]	@ (8000804 <MX_GPIO_Init+0xc4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <MX_GPIO_Init+0xc4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a22      	ldr	r2, [pc, #136]	@ (8000804 <MX_GPIO_Init+0xc4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <MX_GPIO_Init+0xc4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <MX_GPIO_Init+0xc4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a1b      	ldr	r2, [pc, #108]	@ (8000804 <MX_GPIO_Init+0xc4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <MX_GPIO_Init+0xc4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	4816      	ldr	r0, [pc, #88]	@ (8000808 <MX_GPIO_Init+0xc8>)
 80007b0:	f001 fabe 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	4810      	ldr	r0, [pc, #64]	@ (800080c <MX_GPIO_Init+0xcc>)
 80007cc:	f001 f91c 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007d0:	2320      	movs	r3, #32
 80007d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	4619      	mov	r1, r3
 80007e6:	4808      	ldr	r0, [pc, #32]	@ (8000808 <MX_GPIO_Init+0xc8>)
 80007e8:	f001 f90e 	bl	8001a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	2028      	movs	r0, #40	@ 0x28
 80007f2:	f000 fcd0 	bl	8001196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007f6:	2028      	movs	r0, #40	@ 0x28
 80007f8:	f000 fce9 	bl	80011ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000
 800080c:	40020800 	.word	0x40020800

08000810 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af02      	add	r7, sp, #8
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin== GPIO_PIN_13) {
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000820:	d10d      	bne.n	800083e <HAL_GPIO_EXTI_Callback+0x2e>
		  copyBufferData(&ring, copyBuffer, 100, "DATA1");
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <HAL_GPIO_EXTI_Callback+0x38>)
 8000824:	2264      	movs	r2, #100	@ 0x64
 8000826:	4909      	ldr	r1, [pc, #36]	@ (800084c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000828:	4809      	ldr	r0, [pc, #36]	@ (8000850 <HAL_GPIO_EXTI_Callback+0x40>)
 800082a:	f000 f8f4 	bl	8000a16 <copyBufferData>
		  copyAfterPattern(&ring, patternBuffer, "DATA2", '\n',100);
 800082e:	2364      	movs	r3, #100	@ 0x64
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	230a      	movs	r3, #10
 8000834:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_GPIO_EXTI_Callback+0x44>)
 8000836:	4908      	ldr	r1, [pc, #32]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x48>)
 8000838:	4805      	ldr	r0, [pc, #20]	@ (8000850 <HAL_GPIO_EXTI_Callback+0x40>)
 800083a:	f000 f976 	bl	8000b2a <copyAfterPattern>

	}

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	08003cd0 	.word	0x08003cd0
 800084c:	20000070 	.word	0x20000070
 8000850:	2000002c 	.word	0x2000002c
 8000854:	08003cd8 	.word	0x08003cd8
 8000858:	200000d4 	.word	0x200000d4

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <Error_Handler+0x8>

08000868 <resetBuffer>:

/*
 * @brief  : Verilen ring buffer'ı sıfırlar.
 * @param  : pRingBuffer - Sıfırlanacak ring buffer nesnesinin pointer'ı.
 */
void resetBuffer(Ring_Buffer_t *pRingBuffer) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
    pRingBuffer->head = 0;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2200      	movs	r2, #0
 8000874:	805a      	strh	r2, [r3, #2]
    pRingBuffer->tail = 0;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2200      	movs	r2, #0
 800087a:	801a      	strh	r2, [r3, #0]
    memset(pRingBuffer->buffer, 0, RING_MAX_SIZE);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3304      	adds	r3, #4
 8000880:	2240      	movs	r2, #64	@ 0x40
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f003 f9c1 	bl	8003c0c <memset>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <bufferIsEmpty>:
/*
 * @brief  : Ring buffer'ın boş olup olmadığını kontrol eder.
 * @param  : pRingBuffer - Kontrol edilecek ring buffer nesnesi.
 * @return : true - Buffer boş, false - Buffer dolu.
 */
bool bufferIsEmpty(Ring_Buffer_t *pRingBuffer) {
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
    return (pRingBuffer->head == pRingBuffer->tail);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	885a      	ldrh	r2, [r3, #2]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	bf0c      	ite	eq
 80008a6:	2301      	moveq	r3, #1
 80008a8:	2300      	movne	r3, #0
 80008aa:	b2db      	uxtb	r3, r3
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <bufferIsFull>:
/*
 * @brief  : Ring buffer'ın dolu olup olmadığını kontrol eder.
 * @param  : pRingBuffer - Kontrol edilecek ring buffer nesnesi.
 * @return : true - Buffer dolu, false - Buffer dolu değil.
 */
bool bufferIsFull(Ring_Buffer_t *pRingBuffer) {
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
    return ((pRingBuffer->head + 1) % RING_MAX_SIZE == pRingBuffer->tail);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	885b      	ldrh	r3, [r3, #2]
 80008c4:	3301      	adds	r3, #1
 80008c6:	425a      	negs	r2, r3
 80008c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80008cc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80008d0:	bf58      	it	pl
 80008d2:	4253      	negpl	r3, r2
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	8812      	ldrh	r2, [r2, #0]
 80008d8:	4293      	cmp	r3, r2
 80008da:	bf0c      	ite	eq
 80008dc:	2301      	moveq	r3, #1
 80008de:	2300      	movne	r3, #0
 80008e0:	b2db      	uxtb	r3, r3
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <writeBufferData>:
/*
 * @brief  : Ring buffer'a veri yazar. head günceller
 * @param  : pRingBuffer - Buffer nesnesi, data - Yazılacak veri.
 * @return : true - Veri yazıldı, false - Buffer dolu.
 */
void writeBufferData(Ring_Buffer_t *pRingBuffer, uint8_t data) {
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	460b      	mov	r3, r1
 80008f8:	70fb      	strb	r3, [r7, #3]
    if (bufferIsFull(pRingBuffer)) {
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ffdc 	bl	80008b8 <bufferIsFull>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d00c      	beq.n	8000920 <writeBufferData+0x32>
        pRingBuffer->tail = (pRingBuffer->tail + 1) % RING_MAX_SIZE;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	3301      	adds	r3, #1
 800090c:	425a      	negs	r2, r3
 800090e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000912:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000916:	bf58      	it	pl
 8000918:	4253      	negpl	r3, r2
 800091a:	b29a      	uxth	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	801a      	strh	r2, [r3, #0]
    }
    pRingBuffer->buffer[pRingBuffer->head] = data;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	885b      	ldrh	r3, [r3, #2]
 8000924:	461a      	mov	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	78fa      	ldrb	r2, [r7, #3]
 800092c:	711a      	strb	r2, [r3, #4]
    pRingBuffer->head = (pRingBuffer->head + 1) % RING_MAX_SIZE;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	885b      	ldrh	r3, [r3, #2]
 8000932:	3301      	adds	r3, #1
 8000934:	425a      	negs	r2, r3
 8000936:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800093a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800093e:	bf58      	it	pl
 8000940:	4253      	negpl	r3, r2
 8000942:	b29a      	uxth	r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	805a      	strh	r2, [r3, #2]
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <findDataInBuffer>:
/*
 * @brief  : Ring buffer içinde belirli bir string'i arar. tail guncellenmez sadece olup olmadıgı hakkında bilgi alinir.
 * @param  : pRingBuffer - Buffer nesnesi, str - Aranacak string.
 * @return : true - String bulundu, false - String bulunamadı.
 */
bool findDataInBuffer(Ring_Buffer_t *pRingBuffer, const char *str) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
    uint16_t strIndex = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	82fb      	strh	r3, [r7, #22]
    uint16_t strSize = strlen(str);
 800095e:	6838      	ldr	r0, [r7, #0]
 8000960:	f7ff fc50 	bl	8000204 <strlen>
 8000964:	4603      	mov	r3, r0
 8000966:	827b      	strh	r3, [r7, #18]
    uint16_t length = (pRingBuffer->head >= pRingBuffer->tail)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	885a      	ldrh	r2, [r3, #2]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d306      	bcc.n	8000982 <findDataInBuffer+0x32>
                      ? (pRingBuffer->head - pRingBuffer->tail)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	885a      	ldrh	r2, [r3, #2]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	881b      	ldrh	r3, [r3, #0]
    uint16_t length = (pRingBuffer->head >= pRingBuffer->tail)
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	b29b      	uxth	r3, r3
 8000980:	e007      	b.n	8000992 <findDataInBuffer+0x42>
                      : (RING_MAX_SIZE - pRingBuffer->tail + pRingBuffer->head);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	885a      	ldrh	r2, [r3, #2]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	b29b      	uxth	r3, r3
    uint16_t length = (pRingBuffer->head >= pRingBuffer->tail)
 800098e:	3340      	adds	r3, #64	@ 0x40
 8000990:	b29b      	uxth	r3, r3
 8000992:	823b      	strh	r3, [r7, #16]

    if (strSize > RING_MAX_SIZE || bufferIsEmpty(pRingBuffer)) {
 8000994:	8a7b      	ldrh	r3, [r7, #18]
 8000996:	2b40      	cmp	r3, #64	@ 0x40
 8000998:	d805      	bhi.n	80009a6 <findDataInBuffer+0x56>
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff ff79 	bl	8000892 <bufferIsEmpty>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <findDataInBuffer+0x5a>
        return false; // Hatalı durum: String buffer'dan büyük veya buffer boş
 80009a6:	2300      	movs	r3, #0
 80009a8:	e031      	b.n	8000a0e <findDataInBuffer+0xbe>
    }

    for (uint16_t i = 0; i < length; i++) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	82bb      	strh	r3, [r7, #20]
 80009ae:	e029      	b.n	8000a04 <findDataInBuffer+0xb4>
        uint16_t currentIndex = (pRingBuffer->tail + i) % RING_MAX_SIZE;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	881a      	ldrh	r2, [r3, #0]
 80009b4:	8abb      	ldrh	r3, [r7, #20]
 80009b6:	4413      	add	r3, r2
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80009be:	81fb      	strh	r3, [r7, #14]
        if (pRingBuffer->buffer[currentIndex] == str[strIndex]) {
 80009c0:	89fb      	ldrh	r3, [r7, #14]
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	791a      	ldrb	r2, [r3, #4]
 80009c8:	8afb      	ldrh	r3, [r7, #22]
 80009ca:	6839      	ldr	r1, [r7, #0]
 80009cc:	440b      	add	r3, r1
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d112      	bne.n	80009fa <findDataInBuffer+0xaa>
            strIndex++;
 80009d4:	8afb      	ldrh	r3, [r7, #22]
 80009d6:	3301      	adds	r3, #1
 80009d8:	82fb      	strh	r3, [r7, #22]
            if (strIndex == strSize) {
 80009da:	8afa      	ldrh	r2, [r7, #22]
 80009dc:	8a7b      	ldrh	r3, [r7, #18]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d10d      	bne.n	80009fe <findDataInBuffer+0xae>
                pRingBuffer->tail = (pRingBuffer->tail + strIndex) % RING_MAX_SIZE;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	881a      	ldrh	r2, [r3, #0]
 80009e6:	8afb      	ldrh	r3, [r7, #22]
 80009e8:	4413      	add	r3, r2
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	801a      	strh	r2, [r3, #0]
                return true; // String bulundu
 80009f6:	2301      	movs	r3, #1
 80009f8:	e009      	b.n	8000a0e <findDataInBuffer+0xbe>
            }
        } else {
            strIndex = 0; // Eşleşme kesildi, baştan başla
 80009fa:	2300      	movs	r3, #0
 80009fc:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < length; i++) {
 80009fe:	8abb      	ldrh	r3, [r7, #20]
 8000a00:	3301      	adds	r3, #1
 8000a02:	82bb      	strh	r3, [r7, #20]
 8000a04:	8aba      	ldrh	r2, [r7, #20]
 8000a06:	8a3b      	ldrh	r3, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d3d1      	bcc.n	80009b0 <findDataInBuffer+0x60>
        }
    }

    return false; // String bulunamadı
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <copyBufferData>:

/*
 * @brief  : Ring buffer'dan belirtilen veriyi ve sonrakini kopyalar.
 * @param  : pRingBuffer - Buffer nesnesi, copyField - Verinin kopyalanacağı alan, copy - Aranan string.
 */
void copyBufferData(Ring_Buffer_t *pRingBuffer, char copyField[], uint8_t fieldSize, const char *copy) {
 8000a16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a1a:	b08b      	sub	sp, #44	@ 0x2c
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	4613      	mov	r3, r2
 8000a26:	71fb      	strb	r3, [r7, #7]
    memset(copyField, 0, fieldSize); // Çıkış dizisini sıfırla
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	68b8      	ldr	r0, [r7, #8]
 8000a30:	f003 f8ec 	bl	8003c0c <memset>

    if (bufferIsEmpty(pRingBuffer)) {
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f7ff ff2c 	bl	8000892 <bufferIsEmpty>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d16f      	bne.n	8000b20 <copyBufferData+0x10a>
        return;
    }

    char *ret = strstr((char *)pRingBuffer->buffer, copy);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	3304      	adds	r3, #4
 8000a44:	6839      	ldr	r1, [r7, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f003 f8e8 	bl	8003c1c <strstr>
 8000a4c:	6238      	str	r0, [r7, #32]
    if (ret != NULL) {
 8000a4e:	6a3b      	ldr	r3, [r7, #32]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d066      	beq.n	8000b22 <copyBufferData+0x10c>
 8000a54:	466b      	mov	r3, sp
 8000a56:	461e      	mov	r6, r3
        size_t retLen = strlen(ret);
 8000a58:	6a38      	ldr	r0, [r7, #32]
 8000a5a:	f7ff fbd3 	bl	8000204 <strlen>
 8000a5e:	61f8      	str	r0, [r7, #28]

        uint8_t tempBuffer[retLen + 1];
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	1c59      	adds	r1, r3, #1
 8000a64:	460b      	mov	r3, r1
 8000a66:	3b01      	subs	r3, #1
 8000a68:	61bb      	str	r3, [r7, #24]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	4688      	mov	r8, r1
 8000a6e:	4699      	mov	r9, r3
 8000a70:	f04f 0200 	mov.w	r2, #0
 8000a74:	f04f 0300 	mov.w	r3, #0
 8000a78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a84:	2300      	movs	r3, #0
 8000a86:	460c      	mov	r4, r1
 8000a88:	461d      	mov	r5, r3
 8000a8a:	f04f 0200 	mov.w	r2, #0
 8000a8e:	f04f 0300 	mov.w	r3, #0
 8000a92:	00eb      	lsls	r3, r5, #3
 8000a94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a98:	00e2      	lsls	r2, r4, #3
 8000a9a:	1dcb      	adds	r3, r1, #7
 8000a9c:	08db      	lsrs	r3, r3, #3
 8000a9e:	00db      	lsls	r3, r3, #3
 8000aa0:	ebad 0d03 	sub.w	sp, sp, r3
 8000aa4:	466b      	mov	r3, sp
 8000aa6:	3300      	adds	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
        memset(tempBuffer, 0, sizeof(tempBuffer));
 8000aaa:	460a      	mov	r2, r1
 8000aac:	2100      	movs	r1, #0
 8000aae:	6978      	ldr	r0, [r7, #20]
 8000ab0:	f003 f8ac 	bl	8003c0c <memset>
        memcpy(tempBuffer, ret, retLen);
 8000ab4:	69fa      	ldr	r2, [r7, #28]
 8000ab6:	6a39      	ldr	r1, [r7, #32]
 8000ab8:	6978      	ldr	r0, [r7, #20]
 8000aba:	f003 f8e9 	bl	8003c90 <memcpy>

        for (int i = 0; i < retLen && i < fieldSize - 1; i++) {
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ac2:	e022      	b.n	8000b0a <copyBufferData+0xf4>
            copyField[i] = tempBuffer[i];
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	4413      	add	r3, r2
 8000aca:	6979      	ldr	r1, [r7, #20]
 8000acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ace:	440a      	add	r2, r1
 8000ad0:	7812      	ldrb	r2, [r2, #0]
 8000ad2:	701a      	strb	r2, [r3, #0]
            if (tempBuffer[i] == '\0' || tempBuffer[i] == '\r' || tempBuffer[i] == '\n') {
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad8:	4413      	add	r3, r2
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d00b      	beq.n	8000af8 <copyBufferData+0xe2>
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae4:	4413      	add	r3, r2
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b0d      	cmp	r3, #13
 8000aea:	d005      	beq.n	8000af8 <copyBufferData+0xe2>
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af0:	4413      	add	r3, r2
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b0a      	cmp	r3, #10
 8000af6:	d105      	bne.n	8000b04 <copyBufferData+0xee>
                copyField[i] = '\0'; // String sonlandır
 8000af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	4413      	add	r3, r2
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
                break;
 8000b02:	e00b      	b.n	8000b1c <copyBufferData+0x106>
        for (int i = 0; i < retLen && i < fieldSize - 1; i++) {
 8000b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b06:	3301      	adds	r3, #1
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0c:	69fa      	ldr	r2, [r7, #28]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d904      	bls.n	8000b1c <copyBufferData+0x106>
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbd3      	blt.n	8000ac4 <copyBufferData+0xae>
 8000b1c:	46b5      	mov	sp, r6
 8000b1e:	e000      	b.n	8000b22 <copyBufferData+0x10c>
        return;
 8000b20:	bf00      	nop
            }
        }
    }
}
 8000b22:	372c      	adds	r7, #44	@ 0x2c
 8000b24:	46bd      	mov	sp, r7
 8000b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000b2a <copyAfterPattern>:
 * @param copyStart : Bufferdaki başlangıç desenidir. Bu desenden sonraki karakterden itibaren veri kopyalanır.
 * @param copyFinish : Kopyalanacak verinin sonunu belirten bitiş karakteridir.
 * @param len        : Kopyalanacak maksimum bayt sayısı
 *
 */
void copyAfterPattern(Ring_Buffer_t *pRingBuffer, char copyField[], const char *copyStart, char copyFinish, uint16_t len) {
 8000b2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b2e:	b08b      	sub	sp, #44	@ 0x2c
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	70fb      	strb	r3, [r7, #3]
 8000b3a:	466b      	mov	r3, sp
 8000b3c:	461e      	mov	r6, r3
    uint8_t tempBuffer[len];
 8000b3e:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 8000b42:	460b      	mov	r3, r1
 8000b44:	3b01      	subs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	b28b      	uxth	r3, r1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	4698      	mov	r8, r3
 8000b4e:	4691      	mov	r9, r2
 8000b50:	f04f 0200 	mov.w	r2, #0
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b64:	b28b      	uxth	r3, r1
 8000b66:	2200      	movs	r2, #0
 8000b68:	461c      	mov	r4, r3
 8000b6a:	4615      	mov	r5, r2
 8000b6c:	f04f 0200 	mov.w	r2, #0
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	00eb      	lsls	r3, r5, #3
 8000b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b7a:	00e2      	lsls	r2, r4, #3
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	3307      	adds	r3, #7
 8000b80:	08db      	lsrs	r3, r3, #3
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	ebad 0d03 	sub.w	sp, sp, r3
 8000b88:	466b      	mov	r3, sp
 8000b8a:	3300      	adds	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
    uint16_t tempIndex = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	84fb      	strh	r3, [r7, #38]	@ 0x26
    char *ret = strstr((char *)pRingBuffer->buffer, copyStart);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3304      	adds	r3, #4
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f003 f83f 	bl	8003c1c <strstr>
 8000b9e:	6238      	str	r0, [r7, #32]

    if (ret != NULL) {
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d030      	beq.n	8000c08 <copyAfterPattern+0xde>
        ret += strlen(copyStart);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff fb2c 	bl	8000204 <strlen>
 8000bac:	4602      	mov	r2, r0
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	623b      	str	r3, [r7, #32]
        char ch = *ret;
 8000bb4:	6a3b      	ldr	r3, [r7, #32]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	77fb      	strb	r3, [r7, #31]
        while (tempIndex < len - 1) {
 8000bba:	e013      	b.n	8000be4 <copyAfterPattern+0xba>
            if (ch == copyFinish || ch == '\0') {
 8000bbc:	7ffa      	ldrb	r2, [r7, #31]
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d015      	beq.n	8000bf0 <copyAfterPattern+0xc6>
 8000bc4:	7ffb      	ldrb	r3, [r7, #31]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d012      	beq.n	8000bf0 <copyAfterPattern+0xc6>
                break;
            }
            tempBuffer[tempIndex++] = ch;
 8000bca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000bcc:	1c5a      	adds	r2, r3, #1
 8000bce:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	7ffa      	ldrb	r2, [r7, #31]
 8000bd6:	545a      	strb	r2, [r3, r1]
            ret++;
 8000bd8:	6a3b      	ldr	r3, [r7, #32]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	623b      	str	r3, [r7, #32]
            ch = *ret;
 8000bde:	6a3b      	ldr	r3, [r7, #32]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	77fb      	strb	r3, [r7, #31]
        while (tempIndex < len - 1) {
 8000be4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000be6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000bea:	3b01      	subs	r3, #1
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbe5      	blt.n	8000bbc <copyAfterPattern+0x92>
        }
        tempBuffer[tempIndex] = '\0';
 8000bf0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	54d1      	strb	r1, [r2, r3]
        memcpy(copyField, tempBuffer, tempIndex + 1);
 8000bf8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	6979      	ldr	r1, [r7, #20]
 8000c00:	68b8      	ldr	r0, [r7, #8]
 8000c02:	f003 f845 	bl	8003c90 <memcpy>
 8000c06:	e002      	b.n	8000c0e <copyAfterPattern+0xe4>
    }
    else
    {
        copyField[0] = '\0';
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	46b5      	mov	sp, r6
    }
}
 8000c10:	bf00      	nop
 8000c12:	372c      	adds	r7, #44	@ 0x2c
 8000c14:	46bd      	mov	sp, r7
 8000c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c68 <HAL_MspInit+0x4c>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c32:	4b0d      	ldr	r3, [pc, #52]	@ (8000c68 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c46:	4a08      	ldr	r2, [pc, #32]	@ (8000c68 <HAL_MspInit+0x4c>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_MspInit+0x4c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a4c      	ldr	r2, [pc, #304]	@ (8000dbc <HAL_UART_MspInit+0x150>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	f040 8091 	bne.w	8000db2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	4b4a      	ldr	r3, [pc, #296]	@ (8000dc0 <HAL_UART_MspInit+0x154>)
 8000c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c98:	4a49      	ldr	r2, [pc, #292]	@ (8000dc0 <HAL_UART_MspInit+0x154>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca0:	4b47      	ldr	r3, [pc, #284]	@ (8000dc0 <HAL_UART_MspInit+0x154>)
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	4b43      	ldr	r3, [pc, #268]	@ (8000dc0 <HAL_UART_MspInit+0x154>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	4a42      	ldr	r2, [pc, #264]	@ (8000dc0 <HAL_UART_MspInit+0x154>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbc:	4b40      	ldr	r3, [pc, #256]	@ (8000dc0 <HAL_UART_MspInit+0x154>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cc8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cda:	2307      	movs	r3, #7
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4837      	ldr	r0, [pc, #220]	@ (8000dc4 <HAL_UART_MspInit+0x158>)
 8000ce6:	f000 fe8f 	bl	8001a08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000cea:	4b37      	ldr	r3, [pc, #220]	@ (8000dc8 <HAL_UART_MspInit+0x15c>)
 8000cec:	4a37      	ldr	r2, [pc, #220]	@ (8000dcc <HAL_UART_MspInit+0x160>)
 8000cee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000cf0:	4b35      	ldr	r3, [pc, #212]	@ (8000dc8 <HAL_UART_MspInit+0x15c>)
 8000cf2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cf6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf8:	4b33      	ldr	r3, [pc, #204]	@ (8000dc8 <HAL_UART_MspInit+0x15c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cfe:	4b32      	ldr	r3, [pc, #200]	@ (8000dc8 <HAL_UART_MspInit+0x15c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d04:	4b30      	ldr	r3, [pc, #192]	@ (8000dc8 <HAL_UART_MspInit+0x15c>)
 8000d06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc8 <HAL_UART_MspInit+0x15c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d12:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc8 <HAL_UART_MspInit+0x15c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d18:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc8 <HAL_UART_MspInit+0x15c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc8 <HAL_UART_MspInit+0x15c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d24:	4b28      	ldr	r3, [pc, #160]	@ (8000dc8 <HAL_UART_MspInit+0x15c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d2a:	4827      	ldr	r0, [pc, #156]	@ (8000dc8 <HAL_UART_MspInit+0x15c>)
 8000d2c:	f000 fa6a 	bl	8001204 <HAL_DMA_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000d36:	f7ff fd91 	bl	800085c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a22      	ldr	r2, [pc, #136]	@ (8000dc8 <HAL_UART_MspInit+0x15c>)
 8000d3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d40:	4a21      	ldr	r2, [pc, #132]	@ (8000dc8 <HAL_UART_MspInit+0x15c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000d46:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <HAL_UART_MspInit+0x164>)
 8000d48:	4a22      	ldr	r2, [pc, #136]	@ (8000dd4 <HAL_UART_MspInit+0x168>)
 8000d4a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000d4c:	4b20      	ldr	r3, [pc, #128]	@ (8000dd0 <HAL_UART_MspInit+0x164>)
 8000d4e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d52:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d54:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <HAL_UART_MspInit+0x164>)
 8000d56:	2240      	movs	r2, #64	@ 0x40
 8000d58:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <HAL_UART_MspInit+0x164>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d60:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <HAL_UART_MspInit+0x164>)
 8000d62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d66:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d68:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <HAL_UART_MspInit+0x164>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d6e:	4b18      	ldr	r3, [pc, #96]	@ (8000dd0 <HAL_UART_MspInit+0x164>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d74:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <HAL_UART_MspInit+0x164>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <HAL_UART_MspInit+0x164>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d80:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <HAL_UART_MspInit+0x164>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d86:	4812      	ldr	r0, [pc, #72]	@ (8000dd0 <HAL_UART_MspInit+0x164>)
 8000d88:	f000 fa3c 	bl	8001204 <HAL_DMA_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000d92:	f7ff fd63 	bl	800085c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd0 <HAL_UART_MspInit+0x164>)
 8000d9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd0 <HAL_UART_MspInit+0x164>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	2025      	movs	r0, #37	@ 0x25
 8000da8:	f000 f9f5 	bl	8001196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dac:	2025      	movs	r0, #37	@ 0x25
 8000dae:	f000 fa0e 	bl	80011ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	@ 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40011000 	.word	0x40011000
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	20000180 	.word	0x20000180
 8000dcc:	40026440 	.word	0x40026440
 8000dd0:	200001e0 	.word	0x200001e0
 8000dd4:	400264b8 	.word	0x400264b8

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <NMI_Handler+0x4>

08000de0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <MemManage_Handler+0x4>

08000df0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <UsageFault_Handler+0x4>

08000e00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2e:	f000 f8b7 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <USART1_IRQHandler+0x10>)
 8000e3e:	f001 fe57 	bl	8002af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000138 	.word	0x20000138

08000e4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e50:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e54:	f000 ff86 	bl	8001d64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e60:	4802      	ldr	r0, [pc, #8]	@ (8000e6c <DMA2_Stream2_IRQHandler+0x10>)
 8000e62:	f000 fb67 	bl	8001534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000180 	.word	0x20000180

08000e70 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e74:	4802      	ldr	r0, [pc, #8]	@ (8000e80 <DMA2_Stream7_IRQHandler+0x10>)
 8000e76:	f000 fb5d 	bl	8001534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200001e0 	.word	0x200001e0

08000e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <SystemInit+0x20>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ea4 <SystemInit+0x20>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ee0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000eac:	f7ff ffea 	bl	8000e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb0:	480c      	ldr	r0, [pc, #48]	@ (8000ee4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eb2:	490d      	ldr	r1, [pc, #52]	@ (8000ee8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000eec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ef4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f002 feb7 	bl	8003c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eda:	f7ff fb33 	bl	8000544 <main>
  bx  lr    
 8000ede:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000eec:	08003d10 	.word	0x08003d10
  ldr r2, =_sbss
 8000ef0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ef4:	20000244 	.word	0x20000244

08000ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC_IRQHandler>
	...

08000efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f00:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	@ (8000f3c <HAL_Init+0x40>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	@ (8000f3c <HAL_Init+0x40>)
 8000f12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	@ (8000f3c <HAL_Init+0x40>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f92b 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	200f      	movs	r0, #15
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff fe74 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023c00 	.word	0x40023c00

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f943 	bl	80011ea <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f7c:	f000 f90b 	bl	8001196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	@ (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000240 	.word	0x20000240

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	@ (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000240 	.word	0x20000240

08000fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800100c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <__NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db0b      	blt.n	800106e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f003 021f 	and.w	r2, r3, #31
 800105c:	4907      	ldr	r1, [pc, #28]	@ (800107c <__NVIC_EnableIRQ+0x38>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	095b      	lsrs	r3, r3, #5
 8001064:	2001      	movs	r0, #1
 8001066:	fa00 f202 	lsl.w	r2, r0, r2
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000e100 	.word	0xe000e100

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	@ (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	@ (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	@ 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	@ 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800114c:	d301      	bcc.n	8001152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114e:	2301      	movs	r3, #1
 8001150:	e00f      	b.n	8001172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <SysTick_Config+0x40>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115a:	210f      	movs	r1, #15
 800115c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001160:	f7ff ff8e 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <SysTick_Config+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	@ (800117c <SysTick_Config+0x40>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff29 	bl	8000fe0 <__NVIC_SetPriorityGrouping>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a8:	f7ff ff3e 	bl	8001028 <__NVIC_GetPriorityGrouping>
 80011ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ff8e 	bl	80010d4 <NVIC_EncodePriority>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff5d 	bl	8001080 <__NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff31 	bl	8001044 <__NVIC_EnableIRQ>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ffa2 	bl	800113c <SysTick_Config>
 80011f8:	4603      	mov	r3, r0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff feda 	bl	8000fc8 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e099      	b.n	8001354 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2202      	movs	r2, #2
 8001224:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0201 	bic.w	r2, r2, #1
 800123e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001240:	e00f      	b.n	8001262 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001242:	f7ff fec1 	bl	8000fc8 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b05      	cmp	r3, #5
 800124e:	d908      	bls.n	8001262 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2220      	movs	r2, #32
 8001254:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2203      	movs	r2, #3
 800125a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e078      	b.n	8001354 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1e8      	bne.n	8001242 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	4b38      	ldr	r3, [pc, #224]	@ (800135c <HAL_DMA_Init+0x158>)
 800127c:	4013      	ands	r3, r2
 800127e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800128e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800129a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d107      	bne.n	80012cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c4:	4313      	orrs	r3, r2
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	f023 0307 	bic.w	r3, r3, #7
 80012e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d117      	bne.n	8001326 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00e      	beq.n	8001326 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 fb01 	bl	8001910 <DMA_CheckFifoParam>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d008      	beq.n	8001326 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2240      	movs	r2, #64	@ 0x40
 8001318:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001322:	2301      	movs	r3, #1
 8001324:	e016      	b.n	8001354 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 fab8 	bl	80018a4 <DMA_CalcBaseAndBitshift>
 8001334:	4603      	mov	r3, r0
 8001336:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800133c:	223f      	movs	r2, #63	@ 0x3f
 800133e:	409a      	lsls	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	f010803f 	.word	0xf010803f

08001360 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800137e:	2b01      	cmp	r3, #1
 8001380:	d101      	bne.n	8001386 <HAL_DMA_Start_IT+0x26>
 8001382:	2302      	movs	r3, #2
 8001384:	e040      	b.n	8001408 <HAL_DMA_Start_IT+0xa8>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b01      	cmp	r3, #1
 8001398:	d12f      	bne.n	80013fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2202      	movs	r2, #2
 800139e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f000 fa4a 	bl	8001848 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b8:	223f      	movs	r2, #63	@ 0x3f
 80013ba:	409a      	lsls	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0216 	orr.w	r2, r2, #22
 80013ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d007      	beq.n	80013e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0208 	orr.w	r2, r2, #8
 80013e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	e005      	b.n	8001406 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001402:	2302      	movs	r3, #2
 8001404:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001406:	7dfb      	ldrb	r3, [r7, #23]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800141e:	f7ff fdd3 	bl	8000fc8 <HAL_GetTick>
 8001422:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d008      	beq.n	8001442 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2280      	movs	r2, #128	@ 0x80
 8001434:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e052      	b.n	80014e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0216 	bic.w	r2, r2, #22
 8001450:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001460:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	2b00      	cmp	r3, #0
 8001468:	d103      	bne.n	8001472 <HAL_DMA_Abort+0x62>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0208 	bic.w	r2, r2, #8
 8001480:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0201 	bic.w	r2, r2, #1
 8001490:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001492:	e013      	b.n	80014bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001494:	f7ff fd98 	bl	8000fc8 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d90c      	bls.n	80014bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2220      	movs	r2, #32
 80014a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2203      	movs	r2, #3
 80014ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e015      	b.n	80014e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1e4      	bne.n	8001494 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ce:	223f      	movs	r2, #63	@ 0x3f
 80014d0:	409a      	lsls	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d004      	beq.n	800150e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2280      	movs	r2, #128	@ 0x80
 8001508:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e00c      	b.n	8001528 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2205      	movs	r2, #5
 8001512:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0201 	bic.w	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001540:	4b8e      	ldr	r3, [pc, #568]	@ (800177c <HAL_DMA_IRQHandler+0x248>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a8e      	ldr	r2, [pc, #568]	@ (8001780 <HAL_DMA_IRQHandler+0x24c>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	0a9b      	lsrs	r3, r3, #10
 800154c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800155e:	2208      	movs	r2, #8
 8001560:	409a      	lsls	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4013      	ands	r3, r2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d01a      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d013      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0204 	bic.w	r2, r2, #4
 8001586:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800158c:	2208      	movs	r2, #8
 800158e:	409a      	lsls	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001598:	f043 0201 	orr.w	r2, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a4:	2201      	movs	r2, #1
 80015a6:	409a      	lsls	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d012      	beq.n	80015d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00b      	beq.n	80015d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c2:	2201      	movs	r2, #1
 80015c4:	409a      	lsls	r2, r3
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ce:	f043 0202 	orr.w	r2, r3, #2
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015da:	2204      	movs	r2, #4
 80015dc:	409a      	lsls	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d012      	beq.n	800160c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00b      	beq.n	800160c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f8:	2204      	movs	r2, #4
 80015fa:	409a      	lsls	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001604:	f043 0204 	orr.w	r2, r3, #4
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001610:	2210      	movs	r2, #16
 8001612:	409a      	lsls	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d043      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d03c      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800162e:	2210      	movs	r2, #16
 8001630:	409a      	lsls	r2, r3
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d018      	beq.n	8001676 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d108      	bne.n	8001664 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	2b00      	cmp	r3, #0
 8001658:	d024      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	4798      	blx	r3
 8001662:	e01f      	b.n	80016a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001668:	2b00      	cmp	r3, #0
 800166a:	d01b      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	4798      	blx	r3
 8001674:	e016      	b.n	80016a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d107      	bne.n	8001694 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0208 	bic.w	r2, r2, #8
 8001692:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a8:	2220      	movs	r2, #32
 80016aa:	409a      	lsls	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 808f 	beq.w	80017d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 8087 	beq.w	80017d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ca:	2220      	movs	r2, #32
 80016cc:	409a      	lsls	r2, r3
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d136      	bne.n	800174c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0216 	bic.w	r2, r2, #22
 80016ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	695a      	ldr	r2, [r3, #20]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	2b00      	cmp	r3, #0
 8001704:	d103      	bne.n	800170e <HAL_DMA_IRQHandler+0x1da>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0208 	bic.w	r2, r2, #8
 800171c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001722:	223f      	movs	r2, #63	@ 0x3f
 8001724:	409a      	lsls	r2, r3
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800173e:	2b00      	cmp	r3, #0
 8001740:	d07e      	beq.n	8001840 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	4798      	blx	r3
        }
        return;
 800174a:	e079      	b.n	8001840 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d01d      	beq.n	8001796 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10d      	bne.n	8001784 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176c:	2b00      	cmp	r3, #0
 800176e:	d031      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	4798      	blx	r3
 8001778:	e02c      	b.n	80017d4 <HAL_DMA_IRQHandler+0x2a0>
 800177a:	bf00      	nop
 800177c:	20000000 	.word	0x20000000
 8001780:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001788:	2b00      	cmp	r3, #0
 800178a:	d023      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	4798      	blx	r3
 8001794:	e01e      	b.n	80017d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10f      	bne.n	80017c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0210 	bic.w	r2, r2, #16
 80017b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d032      	beq.n	8001842 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d022      	beq.n	800182e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2205      	movs	r2, #5
 80017ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0201 	bic.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	3301      	adds	r3, #1
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	d307      	bcc.n	800181c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f2      	bne.n	8001800 <HAL_DMA_IRQHandler+0x2cc>
 800181a:	e000      	b.n	800181e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800181c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001832:	2b00      	cmp	r3, #0
 8001834:	d005      	beq.n	8001842 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	4798      	blx	r3
 800183e:	e000      	b.n	8001842 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001840:	bf00      	nop
    }
  }
}
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001864:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b40      	cmp	r3, #64	@ 0x40
 8001874:	d108      	bne.n	8001888 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001886:	e007      	b.n	8001898 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	60da      	str	r2, [r3, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	3b10      	subs	r3, #16
 80018b4:	4a14      	ldr	r2, [pc, #80]	@ (8001908 <DMA_CalcBaseAndBitshift+0x64>)
 80018b6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018be:	4a13      	ldr	r2, [pc, #76]	@ (800190c <DMA_CalcBaseAndBitshift+0x68>)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d909      	bls.n	80018e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018da:	f023 0303 	bic.w	r3, r3, #3
 80018de:	1d1a      	adds	r2, r3, #4
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80018e4:	e007      	b.n	80018f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018ee:	f023 0303 	bic.w	r3, r3, #3
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	aaaaaaab 	.word	0xaaaaaaab
 800190c:	08003cf8 	.word	0x08003cf8

08001910 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001920:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d11f      	bne.n	800196a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2b03      	cmp	r3, #3
 800192e:	d856      	bhi.n	80019de <DMA_CheckFifoParam+0xce>
 8001930:	a201      	add	r2, pc, #4	@ (adr r2, 8001938 <DMA_CheckFifoParam+0x28>)
 8001932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001936:	bf00      	nop
 8001938:	08001949 	.word	0x08001949
 800193c:	0800195b 	.word	0x0800195b
 8001940:	08001949 	.word	0x08001949
 8001944:	080019df 	.word	0x080019df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d046      	beq.n	80019e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001958:	e043      	b.n	80019e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001962:	d140      	bne.n	80019e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001968:	e03d      	b.n	80019e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001972:	d121      	bne.n	80019b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d837      	bhi.n	80019ea <DMA_CheckFifoParam+0xda>
 800197a:	a201      	add	r2, pc, #4	@ (adr r2, 8001980 <DMA_CheckFifoParam+0x70>)
 800197c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001980:	08001991 	.word	0x08001991
 8001984:	08001997 	.word	0x08001997
 8001988:	08001991 	.word	0x08001991
 800198c:	080019a9 	.word	0x080019a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
      break;
 8001994:	e030      	b.n	80019f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d025      	beq.n	80019ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a6:	e022      	b.n	80019ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019b0:	d11f      	bne.n	80019f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019b6:	e01c      	b.n	80019f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d903      	bls.n	80019c6 <DMA_CheckFifoParam+0xb6>
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d003      	beq.n	80019cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019c4:	e018      	b.n	80019f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
      break;
 80019ca:	e015      	b.n	80019f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00e      	beq.n	80019f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
      break;
 80019dc:	e00b      	b.n	80019f6 <DMA_CheckFifoParam+0xe6>
      break;
 80019de:	bf00      	nop
 80019e0:	e00a      	b.n	80019f8 <DMA_CheckFifoParam+0xe8>
      break;
 80019e2:	bf00      	nop
 80019e4:	e008      	b.n	80019f8 <DMA_CheckFifoParam+0xe8>
      break;
 80019e6:	bf00      	nop
 80019e8:	e006      	b.n	80019f8 <DMA_CheckFifoParam+0xe8>
      break;
 80019ea:	bf00      	nop
 80019ec:	e004      	b.n	80019f8 <DMA_CheckFifoParam+0xe8>
      break;
 80019ee:	bf00      	nop
 80019f0:	e002      	b.n	80019f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80019f2:	bf00      	nop
 80019f4:	e000      	b.n	80019f8 <DMA_CheckFifoParam+0xe8>
      break;
 80019f6:	bf00      	nop
    }
  } 
  
  return status; 
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop

08001a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	@ 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	e165      	b.n	8001cf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a24:	2201      	movs	r2, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	f040 8154 	bne.w	8001cea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d005      	beq.n	8001a5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d130      	bne.n	8001abc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	2203      	movs	r2, #3
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a90:	2201      	movs	r2, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f003 0201 	and.w	r2, r3, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d017      	beq.n	8001af8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d123      	bne.n	8001b4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	08da      	lsrs	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3208      	adds	r2, #8
 8001b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	08da      	lsrs	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3208      	adds	r2, #8
 8001b46:	69b9      	ldr	r1, [r7, #24]
 8001b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0203 	and.w	r2, r3, #3
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80ae 	beq.w	8001cea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	4b5d      	ldr	r3, [pc, #372]	@ (8001d08 <HAL_GPIO_Init+0x300>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	4a5c      	ldr	r2, [pc, #368]	@ (8001d08 <HAL_GPIO_Init+0x300>)
 8001b98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001d08 <HAL_GPIO_Init+0x300>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001baa:	4a58      	ldr	r2, [pc, #352]	@ (8001d0c <HAL_GPIO_Init+0x304>)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	089b      	lsrs	r3, r3, #2
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4f      	ldr	r2, [pc, #316]	@ (8001d10 <HAL_GPIO_Init+0x308>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d025      	beq.n	8001c22 <HAL_GPIO_Init+0x21a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4e      	ldr	r2, [pc, #312]	@ (8001d14 <HAL_GPIO_Init+0x30c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d01f      	beq.n	8001c1e <HAL_GPIO_Init+0x216>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4d      	ldr	r2, [pc, #308]	@ (8001d18 <HAL_GPIO_Init+0x310>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d019      	beq.n	8001c1a <HAL_GPIO_Init+0x212>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4c      	ldr	r2, [pc, #304]	@ (8001d1c <HAL_GPIO_Init+0x314>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d013      	beq.n	8001c16 <HAL_GPIO_Init+0x20e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4b      	ldr	r2, [pc, #300]	@ (8001d20 <HAL_GPIO_Init+0x318>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00d      	beq.n	8001c12 <HAL_GPIO_Init+0x20a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4a      	ldr	r2, [pc, #296]	@ (8001d24 <HAL_GPIO_Init+0x31c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d007      	beq.n	8001c0e <HAL_GPIO_Init+0x206>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a49      	ldr	r2, [pc, #292]	@ (8001d28 <HAL_GPIO_Init+0x320>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d101      	bne.n	8001c0a <HAL_GPIO_Init+0x202>
 8001c06:	2306      	movs	r3, #6
 8001c08:	e00c      	b.n	8001c24 <HAL_GPIO_Init+0x21c>
 8001c0a:	2307      	movs	r3, #7
 8001c0c:	e00a      	b.n	8001c24 <HAL_GPIO_Init+0x21c>
 8001c0e:	2305      	movs	r3, #5
 8001c10:	e008      	b.n	8001c24 <HAL_GPIO_Init+0x21c>
 8001c12:	2304      	movs	r3, #4
 8001c14:	e006      	b.n	8001c24 <HAL_GPIO_Init+0x21c>
 8001c16:	2303      	movs	r3, #3
 8001c18:	e004      	b.n	8001c24 <HAL_GPIO_Init+0x21c>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e002      	b.n	8001c24 <HAL_GPIO_Init+0x21c>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_GPIO_Init+0x21c>
 8001c22:	2300      	movs	r3, #0
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	f002 0203 	and.w	r2, r2, #3
 8001c2a:	0092      	lsls	r2, r2, #2
 8001c2c:	4093      	lsls	r3, r2
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c34:	4935      	ldr	r1, [pc, #212]	@ (8001d0c <HAL_GPIO_Init+0x304>)
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c42:	4b3a      	ldr	r3, [pc, #232]	@ (8001d2c <HAL_GPIO_Init+0x324>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c66:	4a31      	ldr	r2, [pc, #196]	@ (8001d2c <HAL_GPIO_Init+0x324>)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d2c <HAL_GPIO_Init+0x324>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c90:	4a26      	ldr	r2, [pc, #152]	@ (8001d2c <HAL_GPIO_Init+0x324>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c96:	4b25      	ldr	r3, [pc, #148]	@ (8001d2c <HAL_GPIO_Init+0x324>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cba:	4a1c      	ldr	r2, [pc, #112]	@ (8001d2c <HAL_GPIO_Init+0x324>)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <HAL_GPIO_Init+0x324>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce4:	4a11      	ldr	r2, [pc, #68]	@ (8001d2c <HAL_GPIO_Init+0x324>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3301      	adds	r3, #1
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2b0f      	cmp	r3, #15
 8001cf4:	f67f ae96 	bls.w	8001a24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3724      	adds	r7, #36	@ 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40013800 	.word	0x40013800
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40020400 	.word	0x40020400
 8001d18:	40020800 	.word	0x40020800
 8001d1c:	40020c00 	.word	0x40020c00
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40021400 	.word	0x40021400
 8001d28:	40021800 	.word	0x40021800
 8001d2c:	40013c00 	.word	0x40013c00

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d4c:	e003      	b.n	8001d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	041a      	lsls	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	619a      	str	r2, [r3, #24]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d6e:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d006      	beq.n	8001d88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d7a:	4a05      	ldr	r2, [pc, #20]	@ (8001d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fd44 	bl	8000810 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40013c00 	.word	0x40013c00

08001d94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	4b20      	ldr	r3, [pc, #128]	@ (8001e24 <HAL_PWREx_EnableOverDrive+0x90>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e24 <HAL_PWREx_EnableOverDrive+0x90>)
 8001da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dae:	4b1d      	ldr	r3, [pc, #116]	@ (8001e24 <HAL_PWREx_EnableOverDrive+0x90>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dba:	4b1b      	ldr	r3, [pc, #108]	@ (8001e28 <HAL_PWREx_EnableOverDrive+0x94>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc0:	f7ff f902 	bl	8000fc8 <HAL_GetTick>
 8001dc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dc6:	e009      	b.n	8001ddc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dc8:	f7ff f8fe 	bl	8000fc8 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dd6:	d901      	bls.n	8001ddc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e01f      	b.n	8001e1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ddc:	4b13      	ldr	r3, [pc, #76]	@ (8001e2c <HAL_PWREx_EnableOverDrive+0x98>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de8:	d1ee      	bne.n	8001dc8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dea:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df0:	f7ff f8ea 	bl	8000fc8 <HAL_GetTick>
 8001df4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001df6:	e009      	b.n	8001e0c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001df8:	f7ff f8e6 	bl	8000fc8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e06:	d901      	bls.n	8001e0c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e007      	b.n	8001e1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e0c:	4b07      	ldr	r3, [pc, #28]	@ (8001e2c <HAL_PWREx_EnableOverDrive+0x98>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e18:	d1ee      	bne.n	8001df8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	420e0040 	.word	0x420e0040
 8001e2c:	40007000 	.word	0x40007000
 8001e30:	420e0044 	.word	0x420e0044

08001e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0cc      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e48:	4b68      	ldr	r3, [pc, #416]	@ (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d90c      	bls.n	8001e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b65      	ldr	r3, [pc, #404]	@ (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b63      	ldr	r3, [pc, #396]	@ (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0b8      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d020      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e88:	4b59      	ldr	r3, [pc, #356]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	4a58      	ldr	r2, [pc, #352]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea0:	4b53      	ldr	r3, [pc, #332]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4a52      	ldr	r2, [pc, #328]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001eaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eac:	4b50      	ldr	r3, [pc, #320]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	494d      	ldr	r1, [pc, #308]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d044      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b47      	ldr	r3, [pc, #284]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d119      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e07f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d003      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d109      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e06f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f02:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e067      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f12:	4b37      	ldr	r3, [pc, #220]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f023 0203 	bic.w	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4934      	ldr	r1, [pc, #208]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f24:	f7ff f850 	bl	8000fc8 <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2c:	f7ff f84c 	bl	8000fc8 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e04f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 020c 	and.w	r2, r3, #12
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d1eb      	bne.n	8001f2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f54:	4b25      	ldr	r3, [pc, #148]	@ (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d20c      	bcs.n	8001f7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b22      	ldr	r3, [pc, #136]	@ (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6a:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e032      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f88:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4916      	ldr	r1, [pc, #88]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d009      	beq.n	8001fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fa6:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	490e      	ldr	r1, [pc, #56]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fba:	f000 f855 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	490a      	ldr	r1, [pc, #40]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	5ccb      	ldrb	r3, [r1, r3]
 8001fce:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd2:	4a09      	ldr	r2, [pc, #36]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001fd6:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <HAL_RCC_ClockConfig+0x1c8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe ffb0 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023c00 	.word	0x40023c00
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	08003ce0 	.word	0x08003ce0
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	20000004 	.word	0x20000004

08002000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002004:	4b03      	ldr	r3, [pc, #12]	@ (8002014 <HAL_RCC_GetHCLKFreq+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000000 	.word	0x20000000

08002018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800201c:	f7ff fff0 	bl	8002000 <HAL_RCC_GetHCLKFreq>
 8002020:	4602      	mov	r2, r0
 8002022:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	0a9b      	lsrs	r3, r3, #10
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	4903      	ldr	r1, [pc, #12]	@ (800203c <HAL_RCC_GetPCLK1Freq+0x24>)
 800202e:	5ccb      	ldrb	r3, [r1, r3]
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40023800 	.word	0x40023800
 800203c:	08003cf0 	.word	0x08003cf0

08002040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002044:	f7ff ffdc 	bl	8002000 <HAL_RCC_GetHCLKFreq>
 8002048:	4602      	mov	r2, r0
 800204a:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	0b5b      	lsrs	r3, r3, #13
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	4903      	ldr	r1, [pc, #12]	@ (8002064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002056:	5ccb      	ldrb	r3, [r1, r3]
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800205c:	4618      	mov	r0, r3
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40023800 	.word	0x40023800
 8002064:	08003cf0 	.word	0x08003cf0

08002068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800206c:	b0ae      	sub	sp, #184	@ 0xb8
 800206e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800208e:	4bcb      	ldr	r3, [pc, #812]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b0c      	cmp	r3, #12
 8002098:	f200 8206 	bhi.w	80024a8 <HAL_RCC_GetSysClockFreq+0x440>
 800209c:	a201      	add	r2, pc, #4	@ (adr r2, 80020a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800209e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a2:	bf00      	nop
 80020a4:	080020d9 	.word	0x080020d9
 80020a8:	080024a9 	.word	0x080024a9
 80020ac:	080024a9 	.word	0x080024a9
 80020b0:	080024a9 	.word	0x080024a9
 80020b4:	080020e1 	.word	0x080020e1
 80020b8:	080024a9 	.word	0x080024a9
 80020bc:	080024a9 	.word	0x080024a9
 80020c0:	080024a9 	.word	0x080024a9
 80020c4:	080020e9 	.word	0x080020e9
 80020c8:	080024a9 	.word	0x080024a9
 80020cc:	080024a9 	.word	0x080024a9
 80020d0:	080024a9 	.word	0x080024a9
 80020d4:	080022d9 	.word	0x080022d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020d8:	4bb9      	ldr	r3, [pc, #740]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80020da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020de:	e1e7      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020e0:	4bb8      	ldr	r3, [pc, #736]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80020e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020e6:	e1e3      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e8:	4bb4      	ldr	r3, [pc, #720]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020f4:	4bb1      	ldr	r3, [pc, #708]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d071      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002100:	4bae      	ldr	r3, [pc, #696]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	099b      	lsrs	r3, r3, #6
 8002106:	2200      	movs	r2, #0
 8002108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800210c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002110:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002118:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002126:	4622      	mov	r2, r4
 8002128:	462b      	mov	r3, r5
 800212a:	f04f 0000 	mov.w	r0, #0
 800212e:	f04f 0100 	mov.w	r1, #0
 8002132:	0159      	lsls	r1, r3, #5
 8002134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002138:	0150      	lsls	r0, r2, #5
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4621      	mov	r1, r4
 8002140:	1a51      	subs	r1, r2, r1
 8002142:	6439      	str	r1, [r7, #64]	@ 0x40
 8002144:	4629      	mov	r1, r5
 8002146:	eb63 0301 	sbc.w	r3, r3, r1
 800214a:	647b      	str	r3, [r7, #68]	@ 0x44
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002158:	4649      	mov	r1, r9
 800215a:	018b      	lsls	r3, r1, #6
 800215c:	4641      	mov	r1, r8
 800215e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002162:	4641      	mov	r1, r8
 8002164:	018a      	lsls	r2, r1, #6
 8002166:	4641      	mov	r1, r8
 8002168:	1a51      	subs	r1, r2, r1
 800216a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800216c:	4649      	mov	r1, r9
 800216e:	eb63 0301 	sbc.w	r3, r3, r1
 8002172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002180:	4649      	mov	r1, r9
 8002182:	00cb      	lsls	r3, r1, #3
 8002184:	4641      	mov	r1, r8
 8002186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800218a:	4641      	mov	r1, r8
 800218c:	00ca      	lsls	r2, r1, #3
 800218e:	4610      	mov	r0, r2
 8002190:	4619      	mov	r1, r3
 8002192:	4603      	mov	r3, r0
 8002194:	4622      	mov	r2, r4
 8002196:	189b      	adds	r3, r3, r2
 8002198:	633b      	str	r3, [r7, #48]	@ 0x30
 800219a:	462b      	mov	r3, r5
 800219c:	460a      	mov	r2, r1
 800219e:	eb42 0303 	adc.w	r3, r2, r3
 80021a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80021b0:	4629      	mov	r1, r5
 80021b2:	024b      	lsls	r3, r1, #9
 80021b4:	4621      	mov	r1, r4
 80021b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021ba:	4621      	mov	r1, r4
 80021bc:	024a      	lsls	r2, r1, #9
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021c6:	2200      	movs	r2, #0
 80021c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80021cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80021d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80021d4:	f7fe f81e 	bl	8000214 <__aeabi_uldivmod>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4613      	mov	r3, r2
 80021de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021e2:	e067      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e4:	4b75      	ldr	r3, [pc, #468]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	2200      	movs	r2, #0
 80021ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80021f0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80021f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80021fe:	2300      	movs	r3, #0
 8002200:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002202:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002206:	4622      	mov	r2, r4
 8002208:	462b      	mov	r3, r5
 800220a:	f04f 0000 	mov.w	r0, #0
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	0159      	lsls	r1, r3, #5
 8002214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002218:	0150      	lsls	r0, r2, #5
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4621      	mov	r1, r4
 8002220:	1a51      	subs	r1, r2, r1
 8002222:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002224:	4629      	mov	r1, r5
 8002226:	eb63 0301 	sbc.w	r3, r3, r1
 800222a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002238:	4649      	mov	r1, r9
 800223a:	018b      	lsls	r3, r1, #6
 800223c:	4641      	mov	r1, r8
 800223e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002242:	4641      	mov	r1, r8
 8002244:	018a      	lsls	r2, r1, #6
 8002246:	4641      	mov	r1, r8
 8002248:	ebb2 0a01 	subs.w	sl, r2, r1
 800224c:	4649      	mov	r1, r9
 800224e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800225e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002262:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002266:	4692      	mov	sl, r2
 8002268:	469b      	mov	fp, r3
 800226a:	4623      	mov	r3, r4
 800226c:	eb1a 0303 	adds.w	r3, sl, r3
 8002270:	623b      	str	r3, [r7, #32]
 8002272:	462b      	mov	r3, r5
 8002274:	eb4b 0303 	adc.w	r3, fp, r3
 8002278:	627b      	str	r3, [r7, #36]	@ 0x24
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002286:	4629      	mov	r1, r5
 8002288:	028b      	lsls	r3, r1, #10
 800228a:	4621      	mov	r1, r4
 800228c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002290:	4621      	mov	r1, r4
 8002292:	028a      	lsls	r2, r1, #10
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800229c:	2200      	movs	r2, #0
 800229e:	673b      	str	r3, [r7, #112]	@ 0x70
 80022a0:	677a      	str	r2, [r7, #116]	@ 0x74
 80022a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80022a6:	f7fd ffb5 	bl	8000214 <__aeabi_uldivmod>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4613      	mov	r3, r2
 80022b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80022b4:	4b41      	ldr	r3, [pc, #260]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	0c1b      	lsrs	r3, r3, #16
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	3301      	adds	r3, #1
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80022c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022d6:	e0eb      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022d8:	4b38      	ldr	r3, [pc, #224]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022e4:	4b35      	ldr	r3, [pc, #212]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d06b      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f0:	4b32      	ldr	r3, [pc, #200]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x354>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	099b      	lsrs	r3, r3, #6
 80022f6:	2200      	movs	r2, #0
 80022f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80022fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002302:	663b      	str	r3, [r7, #96]	@ 0x60
 8002304:	2300      	movs	r3, #0
 8002306:	667b      	str	r3, [r7, #100]	@ 0x64
 8002308:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800230c:	4622      	mov	r2, r4
 800230e:	462b      	mov	r3, r5
 8002310:	f04f 0000 	mov.w	r0, #0
 8002314:	f04f 0100 	mov.w	r1, #0
 8002318:	0159      	lsls	r1, r3, #5
 800231a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800231e:	0150      	lsls	r0, r2, #5
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4621      	mov	r1, r4
 8002326:	1a51      	subs	r1, r2, r1
 8002328:	61b9      	str	r1, [r7, #24]
 800232a:	4629      	mov	r1, r5
 800232c:	eb63 0301 	sbc.w	r3, r3, r1
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800233e:	4659      	mov	r1, fp
 8002340:	018b      	lsls	r3, r1, #6
 8002342:	4651      	mov	r1, sl
 8002344:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002348:	4651      	mov	r1, sl
 800234a:	018a      	lsls	r2, r1, #6
 800234c:	4651      	mov	r1, sl
 800234e:	ebb2 0801 	subs.w	r8, r2, r1
 8002352:	4659      	mov	r1, fp
 8002354:	eb63 0901 	sbc.w	r9, r3, r1
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002364:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002368:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800236c:	4690      	mov	r8, r2
 800236e:	4699      	mov	r9, r3
 8002370:	4623      	mov	r3, r4
 8002372:	eb18 0303 	adds.w	r3, r8, r3
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	462b      	mov	r3, r5
 800237a:	eb49 0303 	adc.w	r3, r9, r3
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800238c:	4629      	mov	r1, r5
 800238e:	024b      	lsls	r3, r1, #9
 8002390:	4621      	mov	r1, r4
 8002392:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002396:	4621      	mov	r1, r4
 8002398:	024a      	lsls	r2, r1, #9
 800239a:	4610      	mov	r0, r2
 800239c:	4619      	mov	r1, r3
 800239e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023a2:	2200      	movs	r2, #0
 80023a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80023a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80023a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023ac:	f7fd ff32 	bl	8000214 <__aeabi_uldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4613      	mov	r3, r2
 80023b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023ba:	e065      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x420>
 80023bc:	40023800 	.word	0x40023800
 80023c0:	00f42400 	.word	0x00f42400
 80023c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c8:	4b3d      	ldr	r3, [pc, #244]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	099b      	lsrs	r3, r3, #6
 80023ce:	2200      	movs	r2, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	4611      	mov	r1, r2
 80023d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80023da:	2300      	movs	r3, #0
 80023dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80023de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80023e2:	4642      	mov	r2, r8
 80023e4:	464b      	mov	r3, r9
 80023e6:	f04f 0000 	mov.w	r0, #0
 80023ea:	f04f 0100 	mov.w	r1, #0
 80023ee:	0159      	lsls	r1, r3, #5
 80023f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023f4:	0150      	lsls	r0, r2, #5
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4641      	mov	r1, r8
 80023fc:	1a51      	subs	r1, r2, r1
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	4649      	mov	r1, r9
 8002402:	eb63 0301 	sbc.w	r3, r3, r1
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002414:	4659      	mov	r1, fp
 8002416:	018b      	lsls	r3, r1, #6
 8002418:	4651      	mov	r1, sl
 800241a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800241e:	4651      	mov	r1, sl
 8002420:	018a      	lsls	r2, r1, #6
 8002422:	4651      	mov	r1, sl
 8002424:	1a54      	subs	r4, r2, r1
 8002426:	4659      	mov	r1, fp
 8002428:	eb63 0501 	sbc.w	r5, r3, r1
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	00eb      	lsls	r3, r5, #3
 8002436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800243a:	00e2      	lsls	r2, r4, #3
 800243c:	4614      	mov	r4, r2
 800243e:	461d      	mov	r5, r3
 8002440:	4643      	mov	r3, r8
 8002442:	18e3      	adds	r3, r4, r3
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	464b      	mov	r3, r9
 8002448:	eb45 0303 	adc.w	r3, r5, r3
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800245a:	4629      	mov	r1, r5
 800245c:	028b      	lsls	r3, r1, #10
 800245e:	4621      	mov	r1, r4
 8002460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002464:	4621      	mov	r1, r4
 8002466:	028a      	lsls	r2, r1, #10
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002470:	2200      	movs	r2, #0
 8002472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002474:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002476:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800247a:	f7fd fecb 	bl	8000214 <__aeabi_uldivmod>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4613      	mov	r3, r2
 8002484:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002488:	4b0d      	ldr	r3, [pc, #52]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	0f1b      	lsrs	r3, r3, #28
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800249a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024a6:	e003      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024a8:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80024aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	37b8      	adds	r7, #184	@ 0xb8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	00f42400 	.word	0x00f42400

080024c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e28d      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8083 	beq.w	80025ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024e8:	4b94      	ldr	r3, [pc, #592]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d019      	beq.n	8002528 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80024f4:	4b91      	ldr	r3, [pc, #580]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 030c 	and.w	r3, r3, #12
        || \
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002500:	4b8e      	ldr	r3, [pc, #568]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002508:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800250c:	d00c      	beq.n	8002528 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250e:	4b8b      	ldr	r3, [pc, #556]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d112      	bne.n	8002540 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800251a:	4b88      	ldr	r3, [pc, #544]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002522:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002526:	d10b      	bne.n	8002540 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	4b84      	ldr	r3, [pc, #528]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d05b      	beq.n	80025ec <HAL_RCC_OscConfig+0x124>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d157      	bne.n	80025ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e25a      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002548:	d106      	bne.n	8002558 <HAL_RCC_OscConfig+0x90>
 800254a:	4b7c      	ldr	r3, [pc, #496]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a7b      	ldr	r2, [pc, #492]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e01d      	b.n	8002594 <HAL_RCC_OscConfig+0xcc>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0xb4>
 8002562:	4b76      	ldr	r3, [pc, #472]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a75      	ldr	r2, [pc, #468]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 8002568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b73      	ldr	r3, [pc, #460]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a72      	ldr	r2, [pc, #456]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 8002574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e00b      	b.n	8002594 <HAL_RCC_OscConfig+0xcc>
 800257c:	4b6f      	ldr	r3, [pc, #444]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a6e      	ldr	r2, [pc, #440]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 8002582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	4b6c      	ldr	r3, [pc, #432]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a6b      	ldr	r2, [pc, #428]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 800258e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d013      	beq.n	80025c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe fd14 	bl	8000fc8 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a4:	f7fe fd10 	bl	8000fc8 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	@ 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e21f      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b61      	ldr	r3, [pc, #388]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0xdc>
 80025c2:	e014      	b.n	80025ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7fe fd00 	bl	8000fc8 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7fe fcfc 	bl	8000fc8 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	@ 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e20b      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025de:	4b57      	ldr	r3, [pc, #348]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x104>
 80025ea:	e000      	b.n	80025ee <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d06f      	beq.n	80026da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025fa:	4b50      	ldr	r3, [pc, #320]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b00      	cmp	r3, #0
 8002604:	d017      	beq.n	8002636 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002606:	4b4d      	ldr	r3, [pc, #308]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
        || \
 800260e:	2b08      	cmp	r3, #8
 8002610:	d105      	bne.n	800261e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002612:	4b4a      	ldr	r3, [pc, #296]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00b      	beq.n	8002636 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800261e:	4b47      	ldr	r3, [pc, #284]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d11c      	bne.n	8002664 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262a:	4b44      	ldr	r3, [pc, #272]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d116      	bne.n	8002664 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	4b41      	ldr	r3, [pc, #260]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_RCC_OscConfig+0x186>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d001      	beq.n	800264e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e1d3      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264e:	4b3b      	ldr	r3, [pc, #236]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4937      	ldr	r1, [pc, #220]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002662:	e03a      	b.n	80026da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800266c:	4b34      	ldr	r3, [pc, #208]	@ (8002740 <HAL_RCC_OscConfig+0x278>)
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002672:	f7fe fca9 	bl	8000fc8 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267a:	f7fe fca5 	bl	8000fc8 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e1b4      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	4b2b      	ldr	r3, [pc, #172]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002698:	4b28      	ldr	r3, [pc, #160]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4925      	ldr	r1, [pc, #148]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
 80026ac:	e015      	b.n	80026da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ae:	4b24      	ldr	r3, [pc, #144]	@ (8002740 <HAL_RCC_OscConfig+0x278>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fc88 	bl	8000fc8 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026bc:	f7fe fc84 	bl	8000fc8 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e193      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d036      	beq.n	8002754 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d016      	beq.n	800271c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ee:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <HAL_RCC_OscConfig+0x27c>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f4:	f7fe fc68 	bl	8000fc8 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026fc:	f7fe fc64 	bl	8000fc8 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e173      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270e:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <HAL_RCC_OscConfig+0x274>)
 8002710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x234>
 800271a:	e01b      	b.n	8002754 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271c:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <HAL_RCC_OscConfig+0x27c>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7fe fc51 	bl	8000fc8 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002728:	e00e      	b.n	8002748 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272a:	f7fe fc4d 	bl	8000fc8 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d907      	bls.n	8002748 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e15c      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
 800273c:	40023800 	.word	0x40023800
 8002740:	42470000 	.word	0x42470000
 8002744:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002748:	4b8a      	ldr	r3, [pc, #552]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800274a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1ea      	bne.n	800272a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 8097 	beq.w	8002890 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002766:	4b83      	ldr	r3, [pc, #524]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10f      	bne.n	8002792 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	4b7f      	ldr	r3, [pc, #508]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	4a7e      	ldr	r2, [pc, #504]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002780:	6413      	str	r3, [r2, #64]	@ 0x40
 8002782:	4b7c      	ldr	r3, [pc, #496]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278e:	2301      	movs	r3, #1
 8002790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002792:	4b79      	ldr	r3, [pc, #484]	@ (8002978 <HAL_RCC_OscConfig+0x4b0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d118      	bne.n	80027d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279e:	4b76      	ldr	r3, [pc, #472]	@ (8002978 <HAL_RCC_OscConfig+0x4b0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a75      	ldr	r2, [pc, #468]	@ (8002978 <HAL_RCC_OscConfig+0x4b0>)
 80027a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027aa:	f7fe fc0d 	bl	8000fc8 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b2:	f7fe fc09 	bl	8000fc8 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e118      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002978 <HAL_RCC_OscConfig+0x4b0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x31e>
 80027d8:	4b66      	ldr	r3, [pc, #408]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027dc:	4a65      	ldr	r2, [pc, #404]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e4:	e01c      	b.n	8002820 <HAL_RCC_OscConfig+0x358>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x340>
 80027ee:	4b61      	ldr	r3, [pc, #388]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f2:	4a60      	ldr	r2, [pc, #384]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027fa:	4b5e      	ldr	r3, [pc, #376]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fe:	4a5d      	ldr	r2, [pc, #372]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6713      	str	r3, [r2, #112]	@ 0x70
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0x358>
 8002808:	4b5a      	ldr	r3, [pc, #360]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280c:	4a59      	ldr	r2, [pc, #356]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	6713      	str	r3, [r2, #112]	@ 0x70
 8002814:	4b57      	ldr	r3, [pc, #348]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002818:	4a56      	ldr	r2, [pc, #344]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800281a:	f023 0304 	bic.w	r3, r3, #4
 800281e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d015      	beq.n	8002854 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7fe fbce 	bl	8000fc8 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282e:	e00a      	b.n	8002846 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002830:	f7fe fbca 	bl	8000fc8 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e0d7      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002846:	4b4b      	ldr	r3, [pc, #300]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0ee      	beq.n	8002830 <HAL_RCC_OscConfig+0x368>
 8002852:	e014      	b.n	800287e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7fe fbb8 	bl	8000fc8 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285a:	e00a      	b.n	8002872 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7fe fbb4 	bl	8000fc8 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e0c1      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002872:	4b40      	ldr	r3, [pc, #256]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1ee      	bne.n	800285c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d105      	bne.n	8002890 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002884:	4b3b      	ldr	r3, [pc, #236]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	4a3a      	ldr	r2, [pc, #232]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800288a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800288e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80ad 	beq.w	80029f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800289a:	4b36      	ldr	r3, [pc, #216]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d060      	beq.n	8002968 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d145      	bne.n	800293a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ae:	4b33      	ldr	r3, [pc, #204]	@ (800297c <HAL_RCC_OscConfig+0x4b4>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fe fb88 	bl	8000fc8 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe fb84 	bl	8000fc8 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e093      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ce:	4b29      	ldr	r3, [pc, #164]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	019b      	lsls	r3, r3, #6
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	3b01      	subs	r3, #1
 80028f4:	041b      	lsls	r3, r3, #16
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002904:	071b      	lsls	r3, r3, #28
 8002906:	491b      	ldr	r1, [pc, #108]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800290c:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <HAL_RCC_OscConfig+0x4b4>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7fe fb59 	bl	8000fc8 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291a:	f7fe fb55 	bl	8000fc8 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e064      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292c:	4b11      	ldr	r3, [pc, #68]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x452>
 8002938:	e05c      	b.n	80029f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293a:	4b10      	ldr	r3, [pc, #64]	@ (800297c <HAL_RCC_OscConfig+0x4b4>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe fb42 	bl	8000fc8 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7fe fb3e 	bl	8000fc8 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e04d      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <HAL_RCC_OscConfig+0x4ac>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x480>
 8002966:	e045      	b.n	80029f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d107      	bne.n	8002980 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e040      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
 8002974:	40023800 	.word	0x40023800
 8002978:	40007000 	.word	0x40007000
 800297c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002980:	4b1f      	ldr	r3, [pc, #124]	@ (8002a00 <HAL_RCC_OscConfig+0x538>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d030      	beq.n	80029f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d129      	bne.n	80029f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d122      	bne.n	80029f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029b0:	4013      	ands	r3, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d119      	bne.n	80029f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	3b01      	subs	r3, #1
 80029ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d10f      	bne.n	80029f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d107      	bne.n	80029f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800

08002a04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e042      	b.n	8002a9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe f91e 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	@ 0x24
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fe6b 	bl	8003724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d112      	bne.n	8002ae4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <HAL_UART_Receive_DMA+0x26>
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e00b      	b.n	8002ae6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fbc2 	bl	8003264 <UART_Start_Receive_DMA>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	e000      	b.n	8002ae6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002ae4:	2302      	movs	r3, #2
  }
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b0ba      	sub	sp, #232	@ 0xe8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002b2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10f      	bne.n	8002b56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_UART_IRQHandler+0x66>
 8002b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fd29 	bl	80035a6 <UART_Receive_IT>
      return;
 8002b54:	e25b      	b.n	800300e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80de 	beq.w	8002d1c <HAL_UART_IRQHandler+0x22c>
 8002b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d106      	bne.n	8002b7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b70:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80d1 	beq.w	8002d1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_UART_IRQHandler+0xae>
 8002b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00b      	beq.n	8002bc2 <HAL_UART_IRQHandler+0xd2>
 8002baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	f043 0202 	orr.w	r2, r3, #2
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <HAL_UART_IRQHandler+0xf6>
 8002bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	f043 0204 	orr.w	r2, r3, #4
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d011      	beq.n	8002c16 <HAL_UART_IRQHandler+0x126>
 8002bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d105      	bne.n	8002c0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0e:	f043 0208 	orr.w	r2, r3, #8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 81f2 	beq.w	8003004 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_UART_IRQHandler+0x14e>
 8002c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 fcb4 	bl	80035a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c48:	2b40      	cmp	r3, #64	@ 0x40
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d103      	bne.n	8002c6a <HAL_UART_IRQHandler+0x17a>
 8002c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d04f      	beq.n	8002d0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fbbc 	bl	80033e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7a:	2b40      	cmp	r3, #64	@ 0x40
 8002c7c:	d141      	bne.n	8002d02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3314      	adds	r3, #20
 8002c84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c8c:	e853 3f00 	ldrex	r3, [r3]
 8002c90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3314      	adds	r3, #20
 8002ca6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002caa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002cae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002cb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002cba:	e841 2300 	strex	r3, r2, [r1]
 8002cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1d9      	bne.n	8002c7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d013      	beq.n	8002cfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ed0 <HAL_UART_IRQHandler+0x3e0>)
 8002cd8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fc06 	bl	80014f0 <HAL_DMA_Abort_IT>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf8:	e00e      	b.n	8002d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f99e 	bl	800303c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d00:	e00a      	b.n	8002d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f99a 	bl	800303c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d08:	e006      	b.n	8002d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f996 	bl	800303c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002d16:	e175      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d18:	bf00      	nop
    return;
 8002d1a:	e173      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	f040 814f 	bne.w	8002fc4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8148 	beq.w	8002fc4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8141 	beq.w	8002fc4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d62:	2b40      	cmp	r3, #64	@ 0x40
 8002d64:	f040 80b6 	bne.w	8002ed4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8145 	beq.w	8003008 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d86:	429a      	cmp	r2, r3
 8002d88:	f080 813e 	bcs.w	8003008 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d92:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d9e:	f000 8088 	beq.w	8002eb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	330c      	adds	r3, #12
 8002da8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002dce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002dd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002dde:	e841 2300 	strex	r3, r2, [r1]
 8002de2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1d9      	bne.n	8002da2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3314      	adds	r3, #20
 8002df4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002dfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3314      	adds	r3, #20
 8002e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002e16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002e24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e1      	bne.n	8002dee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3314      	adds	r3, #20
 8002e30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e34:	e853 3f00 	ldrex	r3, [r3]
 8002e38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3314      	adds	r3, #20
 8002e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e56:	e841 2300 	strex	r3, r2, [r1]
 8002e5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1e3      	bne.n	8002e2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e7a:	e853 3f00 	ldrex	r3, [r3]
 8002e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e82:	f023 0310 	bic.w	r3, r3, #16
 8002e86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	330c      	adds	r3, #12
 8002e90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002e94:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e96:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e9c:	e841 2300 	strex	r3, r2, [r1]
 8002ea0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e3      	bne.n	8002e70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe faaf 	bl	8001410 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f8c1 	bl	8003050 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ece:	e09b      	b.n	8003008 <HAL_UART_IRQHandler+0x518>
 8002ed0:	080034af 	.word	0x080034af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 808e 	beq.w	800300c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ef0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 8089 	beq.w	800300c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	330c      	adds	r3, #12
 8002f00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f04:	e853 3f00 	ldrex	r3, [r3]
 8002f08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	330c      	adds	r3, #12
 8002f1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002f1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002f20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f26:	e841 2300 	strex	r3, r2, [r1]
 8002f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e3      	bne.n	8002efa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3314      	adds	r3, #20
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	e853 3f00 	ldrex	r3, [r3]
 8002f40:	623b      	str	r3, [r7, #32]
   return(result);
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3314      	adds	r3, #20
 8002f52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f56:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f5e:	e841 2300 	strex	r3, r2, [r1]
 8002f62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1e3      	bne.n	8002f32 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	330c      	adds	r3, #12
 8002f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	e853 3f00 	ldrex	r3, [r3]
 8002f86:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0310 	bic.w	r3, r3, #16
 8002f8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	330c      	adds	r3, #12
 8002f98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f9c:	61fa      	str	r2, [r7, #28]
 8002f9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa0:	69b9      	ldr	r1, [r7, #24]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	e841 2300 	strex	r3, r2, [r1]
 8002fa8:	617b      	str	r3, [r7, #20]
   return(result);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e3      	bne.n	8002f78 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fba:	4619      	mov	r1, r3
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f847 	bl	8003050 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fc2:	e023      	b.n	800300c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d009      	beq.n	8002fe4 <HAL_UART_IRQHandler+0x4f4>
 8002fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fa7a 	bl	80034d6 <UART_Transmit_IT>
    return;
 8002fe2:	e014      	b.n	800300e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00e      	beq.n	800300e <HAL_UART_IRQHandler+0x51e>
 8002ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 faba 	bl	8003576 <UART_EndTransmit_IT>
    return;
 8003002:	e004      	b.n	800300e <HAL_UART_IRQHandler+0x51e>
    return;
 8003004:	bf00      	nop
 8003006:	e002      	b.n	800300e <HAL_UART_IRQHandler+0x51e>
      return;
 8003008:	bf00      	nop
 800300a:	e000      	b.n	800300e <HAL_UART_IRQHandler+0x51e>
      return;
 800300c:	bf00      	nop
  }
}
 800300e:	37e8      	adds	r7, #232	@ 0xe8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b09c      	sub	sp, #112	@ 0x70
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003074:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d172      	bne.n	800316a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003084:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003086:	2200      	movs	r2, #0
 8003088:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800308a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	330c      	adds	r3, #12
 8003090:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800309a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800309c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	330c      	adds	r3, #12
 80030a8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80030aa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030ac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80030b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1e5      	bne.n	800308a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3314      	adds	r3, #20
 80030c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c8:	e853 3f00 	ldrex	r3, [r3]
 80030cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80030ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d0:	f023 0301 	bic.w	r3, r3, #1
 80030d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80030d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	3314      	adds	r3, #20
 80030dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80030de:	647a      	str	r2, [r7, #68]	@ 0x44
 80030e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030e6:	e841 2300 	strex	r3, r2, [r1]
 80030ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1e5      	bne.n	80030be <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3314      	adds	r3, #20
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	623b      	str	r3, [r7, #32]
   return(result);
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003108:	663b      	str	r3, [r7, #96]	@ 0x60
 800310a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3314      	adds	r3, #20
 8003110:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003112:	633a      	str	r2, [r7, #48]	@ 0x30
 8003114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e5      	bne.n	80030f2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003128:	2220      	movs	r2, #32
 800312a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800312e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	2b01      	cmp	r3, #1
 8003134:	d119      	bne.n	800316a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003136:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	330c      	adds	r3, #12
 800313c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	e853 3f00 	ldrex	r3, [r3]
 8003144:	60fb      	str	r3, [r7, #12]
   return(result);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f023 0310 	bic.w	r3, r3, #16
 800314c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800314e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	330c      	adds	r3, #12
 8003154:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003156:	61fa      	str	r2, [r7, #28]
 8003158:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315a:	69b9      	ldr	r1, [r7, #24]
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	e841 2300 	strex	r3, r2, [r1]
 8003162:	617b      	str	r3, [r7, #20]
   return(result);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1e5      	bne.n	8003136 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800316a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800316c:	2200      	movs	r2, #0
 800316e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003174:	2b01      	cmp	r3, #1
 8003176:	d106      	bne.n	8003186 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800317a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800317c:	4619      	mov	r1, r3
 800317e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003180:	f7ff ff66 	bl	8003050 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003184:	e002      	b.n	800318c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003186:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003188:	f7fd f9bc 	bl	8000504 <HAL_UART_RxCpltCallback>
}
 800318c:	bf00      	nop
 800318e:	3770      	adds	r7, #112	@ 0x70
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2201      	movs	r2, #1
 80031a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d108      	bne.n	80031c2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80031b4:	085b      	lsrs	r3, r3, #1
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	4619      	mov	r1, r3
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f7ff ff48 	bl	8003050 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031c0:	e002      	b.n	80031c8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f7ff ff30 	bl	8003028 <HAL_UART_RxHalfCpltCallback>
}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ec:	2b80      	cmp	r3, #128	@ 0x80
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b21      	cmp	r3, #33	@ 0x21
 8003202:	d108      	bne.n	8003216 <UART_DMAError+0x46>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d005      	beq.n	8003216 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2200      	movs	r2, #0
 800320e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003210:	68b8      	ldr	r0, [r7, #8]
 8003212:	f000 f8c1 	bl	8003398 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003220:	2b40      	cmp	r3, #64	@ 0x40
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b22      	cmp	r3, #34	@ 0x22
 8003236:	d108      	bne.n	800324a <UART_DMAError+0x7a>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2200      	movs	r2, #0
 8003242:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003244:	68b8      	ldr	r0, [r7, #8]
 8003246:	f000 f8cf 	bl	80033e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324e:	f043 0210 	orr.w	r2, r3, #16
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003256:	68b8      	ldr	r0, [r7, #8]
 8003258:	f7ff fef0 	bl	800303c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b098      	sub	sp, #96	@ 0x60
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	4613      	mov	r3, r2
 8003270:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	88fa      	ldrh	r2, [r7, #6]
 800327c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2222      	movs	r2, #34	@ 0x22
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003290:	4a3e      	ldr	r2, [pc, #248]	@ (800338c <UART_Start_Receive_DMA+0x128>)
 8003292:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003298:	4a3d      	ldr	r2, [pc, #244]	@ (8003390 <UART_Start_Receive_DMA+0x12c>)
 800329a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003394 <UART_Start_Receive_DMA+0x130>)
 80032a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a8:	2200      	movs	r2, #0
 80032aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80032ac:	f107 0308 	add.w	r3, r7, #8
 80032b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3304      	adds	r3, #4
 80032bc:	4619      	mov	r1, r3
 80032be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	f7fe f84c 	bl	8001360 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80032c8:	2300      	movs	r3, #0
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d019      	beq.n	800331a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	330c      	adds	r3, #12
 80032ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f0:	e853 3f00 	ldrex	r3, [r3]
 80032f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	330c      	adds	r3, #12
 8003304:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003306:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003308:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800330c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800330e:	e841 2300 	strex	r3, r2, [r1]
 8003312:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1e5      	bne.n	80032e6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3314      	adds	r3, #20
 8003320:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800332a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	657b      	str	r3, [r7, #84]	@ 0x54
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	3314      	adds	r3, #20
 8003338:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800333a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800333c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003340:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e5      	bne.n	800331a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3314      	adds	r3, #20
 8003354:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	617b      	str	r3, [r7, #20]
   return(result);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003364:	653b      	str	r3, [r7, #80]	@ 0x50
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3314      	adds	r3, #20
 800336c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800336e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003370:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	6a39      	ldr	r1, [r7, #32]
 8003374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	61fb      	str	r3, [r7, #28]
   return(result);
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e5      	bne.n	800334e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3760      	adds	r7, #96	@ 0x60
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	08003069 	.word	0x08003069
 8003390:	08003195 	.word	0x08003195
 8003394:	080031d1 	.word	0x080031d1

08003398 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	@ 0x24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	330c      	adds	r3, #12
 80033a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	e853 3f00 	ldrex	r3, [r3]
 80033ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	330c      	adds	r3, #12
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	61ba      	str	r2, [r7, #24]
 80033c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c4:	6979      	ldr	r1, [r7, #20]
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	e841 2300 	strex	r3, r2, [r1]
 80033cc:	613b      	str	r3, [r7, #16]
   return(result);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e5      	bne.n	80033a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80033dc:	bf00      	nop
 80033de:	3724      	adds	r7, #36	@ 0x24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b095      	sub	sp, #84	@ 0x54
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	330c      	adds	r3, #12
 80033f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003402:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	330c      	adds	r3, #12
 800340e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003410:	643a      	str	r2, [r7, #64]	@ 0x40
 8003412:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003414:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003416:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003418:	e841 2300 	strex	r3, r2, [r1]
 800341c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800341e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e5      	bne.n	80033f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3314      	adds	r3, #20
 800342a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	61fb      	str	r3, [r7, #28]
   return(result);
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f023 0301 	bic.w	r3, r3, #1
 800343a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3314      	adds	r3, #20
 8003442:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003444:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003446:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800344a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e5      	bne.n	8003424 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345c:	2b01      	cmp	r3, #1
 800345e:	d119      	bne.n	8003494 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	330c      	adds	r3, #12
 8003466:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	e853 3f00 	ldrex	r3, [r3]
 800346e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f023 0310 	bic.w	r3, r3, #16
 8003476:	647b      	str	r3, [r7, #68]	@ 0x44
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	330c      	adds	r3, #12
 800347e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003480:	61ba      	str	r2, [r7, #24]
 8003482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003484:	6979      	ldr	r1, [r7, #20]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	e841 2300 	strex	r3, r2, [r1]
 800348c:	613b      	str	r3, [r7, #16]
   return(result);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e5      	bne.n	8003460 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034a2:	bf00      	nop
 80034a4:	3754      	adds	r7, #84	@ 0x54
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f7ff fdb7 	bl	800303c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b085      	sub	sp, #20
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b21      	cmp	r3, #33	@ 0x21
 80034e8:	d13e      	bne.n	8003568 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f2:	d114      	bne.n	800351e <UART_Transmit_IT+0x48>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d110      	bne.n	800351e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003510:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	1c9a      	adds	r2, r3, #2
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	621a      	str	r2, [r3, #32]
 800351c:	e008      	b.n	8003530 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	1c59      	adds	r1, r3, #1
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6211      	str	r1, [r2, #32]
 8003528:	781a      	ldrb	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29b      	uxth	r3, r3
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4619      	mov	r1, r3
 800353e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10f      	bne.n	8003564 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003552:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003562:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	e000      	b.n	800356a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003568:	2302      	movs	r3, #2
  }
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800358c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fd3c 	bl	8003014 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b08c      	sub	sp, #48	@ 0x30
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b22      	cmp	r3, #34	@ 0x22
 80035b8:	f040 80ae 	bne.w	8003718 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035c4:	d117      	bne.n	80035f6 <UART_Receive_IT+0x50>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d113      	bne.n	80035f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ee:	1c9a      	adds	r2, r3, #2
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80035f4:	e026      	b.n	8003644 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003608:	d007      	beq.n	800361a <UART_Receive_IT+0x74>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10a      	bne.n	8003628 <UART_Receive_IT+0x82>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	e008      	b.n	800363a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003634:	b2da      	uxtb	r2, r3
 8003636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003638:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29b      	uxth	r3, r3
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	4619      	mov	r1, r3
 8003652:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003654:	2b00      	cmp	r3, #0
 8003656:	d15d      	bne.n	8003714 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0220 	bic.w	r2, r2, #32
 8003666:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003676:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369a:	2b01      	cmp	r3, #1
 800369c:	d135      	bne.n	800370a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	330c      	adds	r3, #12
 80036aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	e853 3f00 	ldrex	r3, [r3]
 80036b2:	613b      	str	r3, [r7, #16]
   return(result);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f023 0310 	bic.w	r3, r3, #16
 80036ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c4:	623a      	str	r2, [r7, #32]
 80036c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	69f9      	ldr	r1, [r7, #28]
 80036ca:	6a3a      	ldr	r2, [r7, #32]
 80036cc:	e841 2300 	strex	r3, r2, [r1]
 80036d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e5      	bne.n	80036a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d10a      	bne.n	80036fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fca4 	bl	8003050 <HAL_UARTEx_RxEventCallback>
 8003708:	e002      	b.n	8003710 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fc fefa 	bl	8000504 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	e002      	b.n	800371a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3730      	adds	r7, #48	@ 0x30
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003728:	b0c0      	sub	sp, #256	@ 0x100
 800372a:	af00      	add	r7, sp, #0
 800372c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003740:	68d9      	ldr	r1, [r3, #12]
 8003742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	ea40 0301 	orr.w	r3, r0, r1
 800374c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	431a      	orrs	r2, r3
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	431a      	orrs	r2, r3
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800377c:	f021 010c 	bic.w	r1, r1, #12
 8003780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800378a:	430b      	orrs	r3, r1
 800378c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800378e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800379a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379e:	6999      	ldr	r1, [r3, #24]
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	ea40 0301 	orr.w	r3, r0, r1
 80037aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	4b8f      	ldr	r3, [pc, #572]	@ (80039f0 <UART_SetConfig+0x2cc>)
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d005      	beq.n	80037c4 <UART_SetConfig+0xa0>
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	4b8d      	ldr	r3, [pc, #564]	@ (80039f4 <UART_SetConfig+0x2d0>)
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d104      	bne.n	80037ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037c4:	f7fe fc3c 	bl	8002040 <HAL_RCC_GetPCLK2Freq>
 80037c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037cc:	e003      	b.n	80037d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037ce:	f7fe fc23 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 80037d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037e0:	f040 810c 	bne.w	80039fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037e8:	2200      	movs	r2, #0
 80037ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80037f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80037f6:	4622      	mov	r2, r4
 80037f8:	462b      	mov	r3, r5
 80037fa:	1891      	adds	r1, r2, r2
 80037fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80037fe:	415b      	adcs	r3, r3
 8003800:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003802:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003806:	4621      	mov	r1, r4
 8003808:	eb12 0801 	adds.w	r8, r2, r1
 800380c:	4629      	mov	r1, r5
 800380e:	eb43 0901 	adc.w	r9, r3, r1
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800381e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003826:	4690      	mov	r8, r2
 8003828:	4699      	mov	r9, r3
 800382a:	4623      	mov	r3, r4
 800382c:	eb18 0303 	adds.w	r3, r8, r3
 8003830:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003834:	462b      	mov	r3, r5
 8003836:	eb49 0303 	adc.w	r3, r9, r3
 800383a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800384a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800384e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003852:	460b      	mov	r3, r1
 8003854:	18db      	adds	r3, r3, r3
 8003856:	653b      	str	r3, [r7, #80]	@ 0x50
 8003858:	4613      	mov	r3, r2
 800385a:	eb42 0303 	adc.w	r3, r2, r3
 800385e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003860:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003864:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003868:	f7fc fcd4 	bl	8000214 <__aeabi_uldivmod>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4b61      	ldr	r3, [pc, #388]	@ (80039f8 <UART_SetConfig+0x2d4>)
 8003872:	fba3 2302 	umull	r2, r3, r3, r2
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	011c      	lsls	r4, r3, #4
 800387a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800387e:	2200      	movs	r2, #0
 8003880:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003884:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003888:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800388c:	4642      	mov	r2, r8
 800388e:	464b      	mov	r3, r9
 8003890:	1891      	adds	r1, r2, r2
 8003892:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003894:	415b      	adcs	r3, r3
 8003896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003898:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800389c:	4641      	mov	r1, r8
 800389e:	eb12 0a01 	adds.w	sl, r2, r1
 80038a2:	4649      	mov	r1, r9
 80038a4:	eb43 0b01 	adc.w	fp, r3, r1
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038bc:	4692      	mov	sl, r2
 80038be:	469b      	mov	fp, r3
 80038c0:	4643      	mov	r3, r8
 80038c2:	eb1a 0303 	adds.w	r3, sl, r3
 80038c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038ca:	464b      	mov	r3, r9
 80038cc:	eb4b 0303 	adc.w	r3, fp, r3
 80038d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80038e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80038e8:	460b      	mov	r3, r1
 80038ea:	18db      	adds	r3, r3, r3
 80038ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80038ee:	4613      	mov	r3, r2
 80038f0:	eb42 0303 	adc.w	r3, r2, r3
 80038f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80038f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80038fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80038fe:	f7fc fc89 	bl	8000214 <__aeabi_uldivmod>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4611      	mov	r1, r2
 8003908:	4b3b      	ldr	r3, [pc, #236]	@ (80039f8 <UART_SetConfig+0x2d4>)
 800390a:	fba3 2301 	umull	r2, r3, r3, r1
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2264      	movs	r2, #100	@ 0x64
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	1acb      	subs	r3, r1, r3
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800391e:	4b36      	ldr	r3, [pc, #216]	@ (80039f8 <UART_SetConfig+0x2d4>)
 8003920:	fba3 2302 	umull	r2, r3, r3, r2
 8003924:	095b      	lsrs	r3, r3, #5
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800392c:	441c      	add	r4, r3
 800392e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003932:	2200      	movs	r2, #0
 8003934:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003938:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800393c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003940:	4642      	mov	r2, r8
 8003942:	464b      	mov	r3, r9
 8003944:	1891      	adds	r1, r2, r2
 8003946:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003948:	415b      	adcs	r3, r3
 800394a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800394c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003950:	4641      	mov	r1, r8
 8003952:	1851      	adds	r1, r2, r1
 8003954:	6339      	str	r1, [r7, #48]	@ 0x30
 8003956:	4649      	mov	r1, r9
 8003958:	414b      	adcs	r3, r1
 800395a:	637b      	str	r3, [r7, #52]	@ 0x34
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003968:	4659      	mov	r1, fp
 800396a:	00cb      	lsls	r3, r1, #3
 800396c:	4651      	mov	r1, sl
 800396e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003972:	4651      	mov	r1, sl
 8003974:	00ca      	lsls	r2, r1, #3
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	4603      	mov	r3, r0
 800397c:	4642      	mov	r2, r8
 800397e:	189b      	adds	r3, r3, r2
 8003980:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003984:	464b      	mov	r3, r9
 8003986:	460a      	mov	r2, r1
 8003988:	eb42 0303 	adc.w	r3, r2, r3
 800398c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800399c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039a4:	460b      	mov	r3, r1
 80039a6:	18db      	adds	r3, r3, r3
 80039a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039aa:	4613      	mov	r3, r2
 80039ac:	eb42 0303 	adc.w	r3, r2, r3
 80039b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039ba:	f7fc fc2b 	bl	8000214 <__aeabi_uldivmod>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4b0d      	ldr	r3, [pc, #52]	@ (80039f8 <UART_SetConfig+0x2d4>)
 80039c4:	fba3 1302 	umull	r1, r3, r3, r2
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	2164      	movs	r1, #100	@ 0x64
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	3332      	adds	r3, #50	@ 0x32
 80039d6:	4a08      	ldr	r2, [pc, #32]	@ (80039f8 <UART_SetConfig+0x2d4>)
 80039d8:	fba2 2303 	umull	r2, r3, r2, r3
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	f003 0207 	and.w	r2, r3, #7
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4422      	add	r2, r4
 80039ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039ec:	e106      	b.n	8003bfc <UART_SetConfig+0x4d8>
 80039ee:	bf00      	nop
 80039f0:	40011000 	.word	0x40011000
 80039f4:	40011400 	.word	0x40011400
 80039f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a00:	2200      	movs	r2, #0
 8003a02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a0e:	4642      	mov	r2, r8
 8003a10:	464b      	mov	r3, r9
 8003a12:	1891      	adds	r1, r2, r2
 8003a14:	6239      	str	r1, [r7, #32]
 8003a16:	415b      	adcs	r3, r3
 8003a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a1e:	4641      	mov	r1, r8
 8003a20:	1854      	adds	r4, r2, r1
 8003a22:	4649      	mov	r1, r9
 8003a24:	eb43 0501 	adc.w	r5, r3, r1
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	00eb      	lsls	r3, r5, #3
 8003a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a36:	00e2      	lsls	r2, r4, #3
 8003a38:	4614      	mov	r4, r2
 8003a3a:	461d      	mov	r5, r3
 8003a3c:	4643      	mov	r3, r8
 8003a3e:	18e3      	adds	r3, r4, r3
 8003a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a44:	464b      	mov	r3, r9
 8003a46:	eb45 0303 	adc.w	r3, r5, r3
 8003a4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	008b      	lsls	r3, r1, #2
 8003a6e:	4621      	mov	r1, r4
 8003a70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a74:	4621      	mov	r1, r4
 8003a76:	008a      	lsls	r2, r1, #2
 8003a78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a7c:	f7fc fbca 	bl	8000214 <__aeabi_uldivmod>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4b60      	ldr	r3, [pc, #384]	@ (8003c08 <UART_SetConfig+0x4e4>)
 8003a86:	fba3 2302 	umull	r2, r3, r3, r2
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	011c      	lsls	r4, r3, #4
 8003a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a92:	2200      	movs	r2, #0
 8003a94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003aa0:	4642      	mov	r2, r8
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	1891      	adds	r1, r2, r2
 8003aa6:	61b9      	str	r1, [r7, #24]
 8003aa8:	415b      	adcs	r3, r3
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ab0:	4641      	mov	r1, r8
 8003ab2:	1851      	adds	r1, r2, r1
 8003ab4:	6139      	str	r1, [r7, #16]
 8003ab6:	4649      	mov	r1, r9
 8003ab8:	414b      	adcs	r3, r1
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac8:	4659      	mov	r1, fp
 8003aca:	00cb      	lsls	r3, r1, #3
 8003acc:	4651      	mov	r1, sl
 8003ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ad2:	4651      	mov	r1, sl
 8003ad4:	00ca      	lsls	r2, r1, #3
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	4642      	mov	r2, r8
 8003ade:	189b      	adds	r3, r3, r2
 8003ae0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ae4:	464b      	mov	r3, r9
 8003ae6:	460a      	mov	r2, r1
 8003ae8:	eb42 0303 	adc.w	r3, r2, r3
 8003aec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003afa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b08:	4649      	mov	r1, r9
 8003b0a:	008b      	lsls	r3, r1, #2
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b12:	4641      	mov	r1, r8
 8003b14:	008a      	lsls	r2, r1, #2
 8003b16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b1a:	f7fc fb7b 	bl	8000214 <__aeabi_uldivmod>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4611      	mov	r1, r2
 8003b24:	4b38      	ldr	r3, [pc, #224]	@ (8003c08 <UART_SetConfig+0x4e4>)
 8003b26:	fba3 2301 	umull	r2, r3, r3, r1
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	2264      	movs	r2, #100	@ 0x64
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	1acb      	subs	r3, r1, r3
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	3332      	adds	r3, #50	@ 0x32
 8003b38:	4a33      	ldr	r2, [pc, #204]	@ (8003c08 <UART_SetConfig+0x4e4>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b44:	441c      	add	r4, r3
 8003b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b54:	4642      	mov	r2, r8
 8003b56:	464b      	mov	r3, r9
 8003b58:	1891      	adds	r1, r2, r2
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	415b      	adcs	r3, r3
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b64:	4641      	mov	r1, r8
 8003b66:	1851      	adds	r1, r2, r1
 8003b68:	6039      	str	r1, [r7, #0]
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	414b      	adcs	r3, r1
 8003b6e:	607b      	str	r3, [r7, #4]
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b7c:	4659      	mov	r1, fp
 8003b7e:	00cb      	lsls	r3, r1, #3
 8003b80:	4651      	mov	r1, sl
 8003b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b86:	4651      	mov	r1, sl
 8003b88:	00ca      	lsls	r2, r1, #3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4642      	mov	r2, r8
 8003b92:	189b      	adds	r3, r3, r2
 8003b94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b96:	464b      	mov	r3, r9
 8003b98:	460a      	mov	r2, r1
 8003b9a:	eb42 0303 	adc.w	r3, r2, r3
 8003b9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003baa:	667a      	str	r2, [r7, #100]	@ 0x64
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003bb8:	4649      	mov	r1, r9
 8003bba:	008b      	lsls	r3, r1, #2
 8003bbc:	4641      	mov	r1, r8
 8003bbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bc2:	4641      	mov	r1, r8
 8003bc4:	008a      	lsls	r2, r1, #2
 8003bc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bca:	f7fc fb23 	bl	8000214 <__aeabi_uldivmod>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c08 <UART_SetConfig+0x4e4>)
 8003bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	2164      	movs	r1, #100	@ 0x64
 8003bdc:	fb01 f303 	mul.w	r3, r1, r3
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	3332      	adds	r3, #50	@ 0x32
 8003be6:	4a08      	ldr	r2, [pc, #32]	@ (8003c08 <UART_SetConfig+0x4e4>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	f003 020f 	and.w	r2, r3, #15
 8003bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4422      	add	r2, r4
 8003bfa:	609a      	str	r2, [r3, #8]
}
 8003bfc:	bf00      	nop
 8003bfe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c02:	46bd      	mov	sp, r7
 8003c04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c08:	51eb851f 	.word	0x51eb851f

08003c0c <memset>:
 8003c0c:	4402      	add	r2, r0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d100      	bne.n	8003c16 <memset+0xa>
 8003c14:	4770      	bx	lr
 8003c16:	f803 1b01 	strb.w	r1, [r3], #1
 8003c1a:	e7f9      	b.n	8003c10 <memset+0x4>

08003c1c <strstr>:
 8003c1c:	780a      	ldrb	r2, [r1, #0]
 8003c1e:	b570      	push	{r4, r5, r6, lr}
 8003c20:	b96a      	cbnz	r2, 8003c3e <strstr+0x22>
 8003c22:	bd70      	pop	{r4, r5, r6, pc}
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d109      	bne.n	8003c3c <strstr+0x20>
 8003c28:	460c      	mov	r4, r1
 8003c2a:	4605      	mov	r5, r0
 8003c2c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f6      	beq.n	8003c22 <strstr+0x6>
 8003c34:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003c38:	429e      	cmp	r6, r3
 8003c3a:	d0f7      	beq.n	8003c2c <strstr+0x10>
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	7803      	ldrb	r3, [r0, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ef      	bne.n	8003c24 <strstr+0x8>
 8003c44:	4618      	mov	r0, r3
 8003c46:	e7ec      	b.n	8003c22 <strstr+0x6>

08003c48 <__libc_init_array>:
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	4d0d      	ldr	r5, [pc, #52]	@ (8003c80 <__libc_init_array+0x38>)
 8003c4c:	4c0d      	ldr	r4, [pc, #52]	@ (8003c84 <__libc_init_array+0x3c>)
 8003c4e:	1b64      	subs	r4, r4, r5
 8003c50:	10a4      	asrs	r4, r4, #2
 8003c52:	2600      	movs	r6, #0
 8003c54:	42a6      	cmp	r6, r4
 8003c56:	d109      	bne.n	8003c6c <__libc_init_array+0x24>
 8003c58:	4d0b      	ldr	r5, [pc, #44]	@ (8003c88 <__libc_init_array+0x40>)
 8003c5a:	4c0c      	ldr	r4, [pc, #48]	@ (8003c8c <__libc_init_array+0x44>)
 8003c5c:	f000 f826 	bl	8003cac <_init>
 8003c60:	1b64      	subs	r4, r4, r5
 8003c62:	10a4      	asrs	r4, r4, #2
 8003c64:	2600      	movs	r6, #0
 8003c66:	42a6      	cmp	r6, r4
 8003c68:	d105      	bne.n	8003c76 <__libc_init_array+0x2e>
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c70:	4798      	blx	r3
 8003c72:	3601      	adds	r6, #1
 8003c74:	e7ee      	b.n	8003c54 <__libc_init_array+0xc>
 8003c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c7a:	4798      	blx	r3
 8003c7c:	3601      	adds	r6, #1
 8003c7e:	e7f2      	b.n	8003c66 <__libc_init_array+0x1e>
 8003c80:	08003d08 	.word	0x08003d08
 8003c84:	08003d08 	.word	0x08003d08
 8003c88:	08003d08 	.word	0x08003d08
 8003c8c:	08003d0c 	.word	0x08003d0c

08003c90 <memcpy>:
 8003c90:	440a      	add	r2, r1
 8003c92:	4291      	cmp	r1, r2
 8003c94:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003c98:	d100      	bne.n	8003c9c <memcpy+0xc>
 8003c9a:	4770      	bx	lr
 8003c9c:	b510      	push	{r4, lr}
 8003c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ca6:	4291      	cmp	r1, r2
 8003ca8:	d1f9      	bne.n	8003c9e <memcpy+0xe>
 8003caa:	bd10      	pop	{r4, pc}

08003cac <_init>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	bf00      	nop
 8003cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb2:	bc08      	pop	{r3}
 8003cb4:	469e      	mov	lr, r3
 8003cb6:	4770      	bx	lr

08003cb8 <_fini>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	bf00      	nop
 8003cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cbe:	bc08      	pop	{r3}
 8003cc0:	469e      	mov	lr, r3
 8003cc2:	4770      	bx	lr
